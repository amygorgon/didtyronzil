{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"tyronZIL DID method specification A W3C Sidetree-based DID method for the Zilliqa blockchain platform Developed by Julio Cabrapan Duarte Funded by ZILHive Conformant to the requirements specified in the: i. World Wide Web Consortium (W3C) DID specification: Decentralized Identifiers (DIDs) v1.0 ii. Decentralized Identity Foundation (DIF) Sidetree protocol specification Problem summary Identities on the internet remain centralized, mainly by identity providers such as Facebook, Google and PayPal. Thus, when people shop online and login with these accounts, they don't have enough control nor understanding of how their data is used and shared with third parties. Self-sovereign identity (SSI) allows people to manage their digital identities and prove who they are without a centralized authority, by anchoring decentralized identifiers (DIDs) on blockchain platforms. However, most DLTs still can't provide SSI applications at scale. By implementing the Sidetree protocol on top of Zilliqa, tyronZIL aims to solve this issue and enable user-controlled digital identities in the Zilliqa ecosystem. Table of contents W3C DIDs Sidetree protocol and default parameters tyronZIL DID scheme tyronZIL DID document tyronZIL DID operations DID resolution [Security and privacy considerations]to-do","title":"Method"},{"location":"#tyronzil-did-method-specification","text":"A W3C Sidetree-based DID method for the Zilliqa blockchain platform Developed by Julio Cabrapan Duarte Funded by ZILHive Conformant to the requirements specified in the: i. World Wide Web Consortium (W3C) DID specification: Decentralized Identifiers (DIDs) v1.0 ii. Decentralized Identity Foundation (DIF) Sidetree protocol specification","title":"tyronZIL DID method specification"},{"location":"#problem-summary","text":"Identities on the internet remain centralized, mainly by identity providers such as Facebook, Google and PayPal. Thus, when people shop online and login with these accounts, they don't have enough control nor understanding of how their data is used and shared with third parties. Self-sovereign identity (SSI) allows people to manage their digital identities and prove who they are without a centralized authority, by anchoring decentralized identifiers (DIDs) on blockchain platforms. However, most DLTs still can't provide SSI applications at scale. By implementing the Sidetree protocol on top of Zilliqa, tyronZIL aims to solve this issue and enable user-controlled digital identities in the Zilliqa ecosystem.","title":"Problem summary"},{"location":"#table-of-contents","text":"W3C DIDs Sidetree protocol and default parameters tyronZIL DID scheme tyronZIL DID document tyronZIL DID operations DID resolution [Security and privacy considerations]to-do","title":"Table of contents"},{"location":"W3C-dids/","text":"W3C DIDs Terminology utilized by tyronZIL: DID method A DID method is the specification for the precise scheme of a DID, and it also specifies the methods creating, resolving, updating and deactivating such a DID and its DID document, using a specific type of verifiable data registry, in tyronZIL's case Zilliqa. Decentralized Identifier (DID) A DID is a globally unique Uniform Resource Identifier (URI) that associates a DID subject with a DID document. Given the decentralized nature of Zilliqa, a tyronZIL DID has its existence guaranteed without depending on a central authority. A DID consists of three parts: The scheme identifier: \"did\" The DID method identifier: \"tyron:zil\" The DID method-specific identifier, which must be unique More information at tyronZIL DID scheme . DID URL A DID URL identifies a particular resource to be located, e.g a specific part of the DID document. It extends the syntax of a basic DID to incorporate other standard URI components: Path: The portion of a DID URL that begins with and includes the first forward slash character, \"/\". Query: The portion of a DID URL that follows the first question mark character, \"?\". Fragment: The portion of a DID URL that follows the first hash sign character \"#\". DID subject The DID subject is the entity identified by the DID and described by the DID document. DID controller The DID controller is the entity that has the capability - as defined by the DID method - to make changes to a DID document. tyronZIL DID subjects are also the controllers of their own DIDs. DID document A DID is resolvable to a DID document, which contains metadata associated with the DID, such as cryptographic material, verification methods and service endpoints relevant to interactions with the DID subject. The DID itself is the value of the id property. More information at tyronZIL DID document . Verification method A verification method is a set of parameters that can be used to independently verify a proof according to the particular method, e.g. a public key. Verification relationship It expresses the relationship between the DID subject and a verification method, e.g. authentication. All verification methods must be associated with a particular verification relationship. to-do: add producer and consumer","title":"W3C"},{"location":"W3C-dids/#w3c-dids","text":"Terminology utilized by tyronZIL:","title":"W3C DIDs"},{"location":"W3C-dids/#did-method","text":"A DID method is the specification for the precise scheme of a DID, and it also specifies the methods creating, resolving, updating and deactivating such a DID and its DID document, using a specific type of verifiable data registry, in tyronZIL's case Zilliqa.","title":"DID method"},{"location":"W3C-dids/#decentralized-identifier-did","text":"A DID is a globally unique Uniform Resource Identifier (URI) that associates a DID subject with a DID document. Given the decentralized nature of Zilliqa, a tyronZIL DID has its existence guaranteed without depending on a central authority. A DID consists of three parts: The scheme identifier: \"did\" The DID method identifier: \"tyron:zil\" The DID method-specific identifier, which must be unique More information at tyronZIL DID scheme .","title":"Decentralized Identifier (DID)"},{"location":"W3C-dids/#did-url","text":"A DID URL identifies a particular resource to be located, e.g a specific part of the DID document. It extends the syntax of a basic DID to incorporate other standard URI components: Path: The portion of a DID URL that begins with and includes the first forward slash character, \"/\". Query: The portion of a DID URL that follows the first question mark character, \"?\". Fragment: The portion of a DID URL that follows the first hash sign character \"#\".","title":"DID URL"},{"location":"W3C-dids/#did-subject","text":"The DID subject is the entity identified by the DID and described by the DID document.","title":"DID subject"},{"location":"W3C-dids/#did-controller","text":"The DID controller is the entity that has the capability - as defined by the DID method - to make changes to a DID document. tyronZIL DID subjects are also the controllers of their own DIDs.","title":"DID controller"},{"location":"W3C-dids/#did-document","text":"A DID is resolvable to a DID document, which contains metadata associated with the DID, such as cryptographic material, verification methods and service endpoints relevant to interactions with the DID subject. The DID itself is the value of the id property. More information at tyronZIL DID document .","title":"DID document"},{"location":"W3C-dids/#verification-method","text":"A verification method is a set of parameters that can be used to independently verify a proof according to the particular method, e.g. a public key.","title":"Verification method"},{"location":"W3C-dids/#verification-relationship","text":"It expresses the relationship between the DID subject and a verification method, e.g. authentication. All verification methods must be associated with a particular verification relationship. to-do: add producer and consumer","title":"Verification relationship"},{"location":"did-document/","text":"tyronZIL DID document For an introduction, read this . A DID document is a graph-based data structure, serialized according to a particular syntax. As a Sidetree-based DID method, tyronZIL's serialization format is JSON. Core representation in JSON: It defines an unambiguous encoding and decoding of all properties and their associated values. It is associated with an IANA-registered MIME type. It defines fragment processing rules for its MIME type. to-do: what is MIME Producers MUST indicate JSON as the media type in the document's metadata. Consumers MUST determine that the \"content-type\" DID resolver metadata field is application/did+json 6.1.1 Production to-do 6.1.2 Consumption Unknown object properties MUST be ignored. to-do: add features A DID document consists of a collection of property-value pairs. The definitions of each of these properties are specified in section \u00a75. Core Properties. Specific representations are defined in section \u00a76. Core Representations. Core properties in a tyronZIL DID document id W3C DID documents MUST include the \"id\" property. The \"id\" property denotes the DID subject, and its value MUST be a single valid tyronZIL DID, e.g.: { \"id\": \"did:tyron:zil:91tDAKCERh95uGgKbJNHYp\", ... } verificationMethod tyronZIL DID documents MUST include the \"verificationMethod\" property. Read the verification method definition [here]](./W3C-dids.md#verification-method) The \"verificationMethod\" value MUST be an array of verification method objects. The \"verificationMethod\" property can be, e.g. a \"publicKey\" property: to-do: check sidetree requirement { \"id\": \"did:tyron:zil:91tDAKCERh95uGgKbJNHYp\", to-do: add example ... } Each verification method object MUST have the following properties: \"id\": Its value MUST be a unique DID URL. There MUST NOT be multiple verification method objects with the same id-value - otherwise the DID document processor MUST produce an error. to-do: test sidetree processor \"type\": Its value MUST be exactly one verification method type. to-do: check sidetree key type. \"controller\": Its value MUST be a valid tyronZIL DID. If the verification method is a public key, then the controller property identifies the DID that controls the corresponding private key. to-do: can tyron have a controller property pointing to a different self-owned DID as a backup/recovery - see sidetree recovery. Specific verification method properties. 5.4 Public keys 5.5 Authentication to-do 5.6 Authorization and delegation > maybe for under age subjects. Sidetree implementation Public key /sidetree/lib/core/versions/latest/models/PublicKeyModel.ts /** * Data model representing a public key in the 'publicKey' array in patches. */ export default interface PublicKeyModel { id: string; type: string; jwk: any; purpose: PublicKeyPurpose[]; } The purpose property is an array with elements of type PublicKeyPurpose. The PublicKeyPurpose enum has two members: Auth and General, both constant-initialized with a string literal (\"auth\" and \"general\" respectively). to-do: why? /sidetree/lib/core/versions/latest/PublicKeyPurpose.ts /** * Sidetree public key purpose. */ enum PublicKeyPurpose { Auth = 'auth', General = 'general' } export default PublicKeyPurpose; DocumentComposer to-do: explore import DocumentComposer from '../../lib/core/versions/latest/DocumentComposer';","title":"Document"},{"location":"did-document/#tyronzil-did-document","text":"For an introduction, read this . A DID document is a graph-based data structure, serialized according to a particular syntax. As a Sidetree-based DID method, tyronZIL's serialization format is JSON. Core representation in JSON: It defines an unambiguous encoding and decoding of all properties and their associated values. It is associated with an IANA-registered MIME type. It defines fragment processing rules for its MIME type. to-do: what is MIME Producers MUST indicate JSON as the media type in the document's metadata. Consumers MUST determine that the \"content-type\" DID resolver metadata field is application/did+json 6.1.1 Production to-do 6.1.2 Consumption Unknown object properties MUST be ignored. to-do: add features A DID document consists of a collection of property-value pairs. The definitions of each of these properties are specified in section \u00a75. Core Properties. Specific representations are defined in section \u00a76. Core Representations.","title":"tyronZIL DID document"},{"location":"did-document/#core-properties-in-a-tyronzil-did-document","text":"","title":"Core properties in a tyronZIL DID document"},{"location":"did-document/#id","text":"W3C DID documents MUST include the \"id\" property. The \"id\" property denotes the DID subject, and its value MUST be a single valid tyronZIL DID, e.g.: { \"id\": \"did:tyron:zil:91tDAKCERh95uGgKbJNHYp\", ... }","title":"id"},{"location":"did-document/#verificationmethod","text":"tyronZIL DID documents MUST include the \"verificationMethod\" property. Read the verification method definition [here]](./W3C-dids.md#verification-method) The \"verificationMethod\" value MUST be an array of verification method objects. The \"verificationMethod\" property can be, e.g. a \"publicKey\" property: to-do: check sidetree requirement { \"id\": \"did:tyron:zil:91tDAKCERh95uGgKbJNHYp\", to-do: add example ... } Each verification method object MUST have the following properties: \"id\": Its value MUST be a unique DID URL. There MUST NOT be multiple verification method objects with the same id-value - otherwise the DID document processor MUST produce an error. to-do: test sidetree processor \"type\": Its value MUST be exactly one verification method type. to-do: check sidetree key type. \"controller\": Its value MUST be a valid tyronZIL DID. If the verification method is a public key, then the controller property identifies the DID that controls the corresponding private key. to-do: can tyron have a controller property pointing to a different self-owned DID as a backup/recovery - see sidetree recovery. Specific verification method properties. 5.4 Public keys 5.5 Authentication to-do 5.6 Authorization and delegation > maybe for under age subjects.","title":"verificationMethod"},{"location":"did-document/#sidetree-implementation","text":"","title":"Sidetree implementation"},{"location":"did-document/#public-key","text":"/sidetree/lib/core/versions/latest/models/PublicKeyModel.ts /** * Data model representing a public key in the 'publicKey' array in patches. */ export default interface PublicKeyModel { id: string; type: string; jwk: any; purpose: PublicKeyPurpose[]; } The purpose property is an array with elements of type PublicKeyPurpose. The PublicKeyPurpose enum has two members: Auth and General, both constant-initialized with a string literal (\"auth\" and \"general\" respectively). to-do: why? /sidetree/lib/core/versions/latest/PublicKeyPurpose.ts /** * Sidetree public key purpose. */ enum PublicKeyPurpose { Auth = 'auth', General = 'general' } export default PublicKeyPurpose;","title":"Public key"},{"location":"did-document/#documentcomposer","text":"to-do: explore import DocumentComposer from '../../lib/core/versions/latest/DocumentComposer';","title":"DocumentComposer"},{"location":"did-scheme/","text":"tyronZIL DID scheme A DID scheme is the formal syntax of a decentralized identifier. The generic W3C DID scheme is a URI scheme conformant with [RFC3986]. The following is the ABNF definition using the syntax in [RFC5234], which defines ALPHA and DIGIT. All other rule names not defined in this ABNF are defined in [RFC3986]. did = \"did:\" method-name \":\" method-specific-id method-name = 1*method-char method-char = %x61-7A / DIGIT method-specific-id = *( \":\" *idchar ) 1*idchar idchar = ALPHA / DIGIT / \".\" / \"-\" / \"_\" The tyronZIL DID method further restricts the generic W3C DID syntax by defining its method-name, method-namespace and method-specific-id syntax: method-name = tyron method-namespace = zil method-specific-id = to-do tyronZIL method-specific id The method-specific-id component of a tyronZIL DID MUST be generated as follows: to-to It MUST be globally unique. tyronZIL DID method namespace: 'zil' The tyronZIL method-specific-id format include colons to establish a hierarchically partitioned namespace 'zil', and to identify specific networks of Zilliqa, such as mainnet and testnet. Therefore, the method-specific-id ABFN rule for tyronZIL is as follows: Example: Normalization The DID scheme name (did) MUST be lowercase. The DID method name (tyron) MUST be lowercase. Case sensitivity and normalization of the value of the method-specific-id rule MUST be defined by the governing DID method specification. to-do Persistence A tyronZIL DID is bound exclusively and permanently to its one and only subject , even after deactivation. tyronZIL DID URL syntax The following is the ABNF definition using the syntax in [RFC5324]. The path-abempty and fragment components are identical to the ABNF rules defined in [RFC3986], and the did-query component is derived from the query ABNF rule.\" did-url = did path-abempty [ \"?\" did-query ] [ \"#\" fragment ] did-query = param *( \"&\" param ) param = param-name \"=\" param-value param-name = 1*pchar param-value = *pchar tyronZIL DID URL components Path To be used to address resources available through a service endpoint. It MUST conform to the path-abempty ABFN rule in [RFC3986]. Query The W3C did-query component is derived from the query ABFN rule. It MUST be used with DID parameters as follows. DID URL parameters DID URL parameters are part on the query component of the DID URL to specify what resource is being requested. W3C DID parameter names: hl : A resource hash of the DID document to add integrity protection. to-do: see HASHLINK service : Identifies a service from the DID document by service ID. did:tyron:zil:91tDAKCERh95uGgKbJNHYp?service=agent version-id : Identifies a specific version of the DID document to be resolved. version-time : Identifies a certain version timestamp of the DID document to be resolved (the document that was valid at that specific time). did:tyron:zil:91tDAKCERh95uGgKbJNHYp?version-time=2020-09-09T17:00:00Z Additional method-specific DID URL parameters A method-specific parameter name MUST be prefixed by the method name, as defined by the method-name rule. A method-specific parameter name defined by one DID method MAY be used byother DID methods. to-do: see how this relates to initial-value in sidetree - sugest to use sidetree as the method name. Method-specific parameter names MAY be combined with generic parameter names in any order. Method-specific parameter namespaces MAY include colons to be partitioned hierarchically. Fragment A W3C DID fragment is used as a method-independent reference into the DID document to identify a component of the document, e.g. a unique public key description or service endpoint. It MUST conform to the generic URI fragment syntax in [RFC3986]. to-do: read the RFC.","title":"Scheme"},{"location":"did-scheme/#tyronzil-did-scheme","text":"A DID scheme is the formal syntax of a decentralized identifier. The generic W3C DID scheme is a URI scheme conformant with [RFC3986]. The following is the ABNF definition using the syntax in [RFC5234], which defines ALPHA and DIGIT. All other rule names not defined in this ABNF are defined in [RFC3986]. did = \"did:\" method-name \":\" method-specific-id method-name = 1*method-char method-char = %x61-7A / DIGIT method-specific-id = *( \":\" *idchar ) 1*idchar idchar = ALPHA / DIGIT / \".\" / \"-\" / \"_\" The tyronZIL DID method further restricts the generic W3C DID syntax by defining its method-name, method-namespace and method-specific-id syntax: method-name = tyron method-namespace = zil method-specific-id = to-do","title":"tyronZIL DID scheme"},{"location":"did-scheme/#tyronzil-method-specific-id","text":"The method-specific-id component of a tyronZIL DID MUST be generated as follows: to-to It MUST be globally unique.","title":"tyronZIL method-specific id"},{"location":"did-scheme/#tyronzil-did-method-namespace-zil","text":"The tyronZIL method-specific-id format include colons to establish a hierarchically partitioned namespace 'zil', and to identify specific networks of Zilliqa, such as mainnet and testnet. Therefore, the method-specific-id ABFN rule for tyronZIL is as follows: Example:","title":"tyronZIL DID method namespace: 'zil'"},{"location":"did-scheme/#normalization","text":"The DID scheme name (did) MUST be lowercase. The DID method name (tyron) MUST be lowercase. Case sensitivity and normalization of the value of the method-specific-id rule MUST be defined by the governing DID method specification. to-do","title":"Normalization"},{"location":"did-scheme/#persistence","text":"A tyronZIL DID is bound exclusively and permanently to its one and only subject , even after deactivation.","title":"Persistence"},{"location":"did-scheme/#tyronzil-did-url-syntax","text":"The following is the ABNF definition using the syntax in [RFC5324]. The path-abempty and fragment components are identical to the ABNF rules defined in [RFC3986], and the did-query component is derived from the query ABNF rule.\" did-url = did path-abempty [ \"?\" did-query ] [ \"#\" fragment ] did-query = param *( \"&\" param ) param = param-name \"=\" param-value param-name = 1*pchar param-value = *pchar","title":"tyronZIL DID URL syntax"},{"location":"did-scheme/#tyronzil-did-url-components","text":"","title":"tyronZIL DID URL components"},{"location":"did-scheme/#path","text":"To be used to address resources available through a service endpoint. It MUST conform to the path-abempty ABFN rule in [RFC3986].","title":"Path"},{"location":"did-scheme/#query","text":"The W3C did-query component is derived from the query ABFN rule. It MUST be used with DID parameters as follows.","title":"Query"},{"location":"did-scheme/#did-url-parameters","text":"DID URL parameters are part on the query component of the DID URL to specify what resource is being requested. W3C DID parameter names: hl : A resource hash of the DID document to add integrity protection. to-do: see HASHLINK service : Identifies a service from the DID document by service ID. did:tyron:zil:91tDAKCERh95uGgKbJNHYp?service=agent version-id : Identifies a specific version of the DID document to be resolved. version-time : Identifies a certain version timestamp of the DID document to be resolved (the document that was valid at that specific time). did:tyron:zil:91tDAKCERh95uGgKbJNHYp?version-time=2020-09-09T17:00:00Z","title":"DID URL parameters"},{"location":"did-scheme/#additional-method-specific-did-url-parameters","text":"A method-specific parameter name MUST be prefixed by the method name, as defined by the method-name rule. A method-specific parameter name defined by one DID method MAY be used byother DID methods. to-do: see how this relates to initial-value in sidetree - sugest to use sidetree as the method name. Method-specific parameter names MAY be combined with generic parameter names in any order. Method-specific parameter namespaces MAY include colons to be partitioned hierarchically.","title":"Additional method-specific DID URL parameters"},{"location":"did-scheme/#fragment","text":"A W3C DID fragment is used as a method-independent reference into the DID document to identify a component of the document, e.g. a unique public key description or service endpoint. It MUST conform to the generic URI fragment syntax in [RFC3986]. to-do: read the RFC.","title":"Fragment"},{"location":"sidetree/","text":"Sidetree protocol Sidetree protocol terminology and default parameters in tyronZIL. Intro. to-do Anchor file An Anchor file is a JSON document containing proving and index data for the create, recovery and deactivate operations, as well as a CAS URI for the associated Map file. This file is anchored to the Zilliqa blockchain through a Sidetree transaction . The maximum size of a compressed Anchor file (MAX_ANCHOR_FILE_SIZE) has a default parameter of 1 MB. Map file A Map file is a JSON document containing proving and index data for the Update operation, as well as a CAS URI for the associated Chunk file. The maximum size of a compressed Map file (MAX_MAP_FILE_SIZE) has a default parameter of 1 MB. Chunk file A Chunk file is a JSON document containing all verbose operation data for the corresponding set of DIDs specified in the corresponding Map file. The maximum size of a compressed Chunk file (MAX_CHUNK_FILE_SIZE) has a default parameter of 10 MB. CAS CAS stands for content-addressable storage. The CAS protocol utilized by tyronZIL is IPFS. CAS URI A CAS URI is a unique content-bound identifier used to locate a specific resource via the CAS protocol. The default CAS_URI_ALGORITHM to generate the CAS URI is IPFS CID. DID suffix A DID suffix is the unique identifier string in a Decentralized Identifier, the last part of the DID after the final colon. Sidetree operation request A Sidetree operation request is a wweration in a batch of operations. Sidetree DID operation A Sidetree DID operation is a set of delta-based modifications that change the state of a DID document when applied. The maximum uncompressed operation size (MAX_OPERATION_SIZE) has a default parameter of 1 kb. Sidetree transaction A Sidetree transaction writes an Anchor string in a DLT transaction of the underlying ledger. Anchor string An Anchor string is the string anchored to the ledger, composed of the CAS URI of an Anchor file prefixed with the declared operation count. The maximum number of operations per batch (MAX_OPERATION_COUNT) has a default parameter of 10,000. Sidetree transaction number The Sidetreee transaction number is a monotonically increasing number deterministically ordered and assigned to every transaction relative to its position in the ledger time. Ledger time code-name: ledgerTime The ledger time is the deterministic clock variable of the underlying blockchain that is used as a deterministic chronological reference. Hash algorithm The HASH_ALGORITH is the algorithm to generate hashes of protocol-related values. The default parameter is SHA256. Hash protocol The HASH_PROTOCOL is the protocol to generate hash representations using the HASH_ALGORITHM. The default parameter is Multihash , a protocol for differentiating outputs from common cryptographic hash functions, addressing size and encoding considerations. Data encoding scheme The DATA_ENCODING_SCHEME is the encoding for various data structures such as JSON and hashes, which MUST have its output in ASCII format. The default parameter is Base64URL. Key algorithm The KEY_ALGORITHM is the asymmetric public key algorithm to sign DID operations, which MUST be a valid JWK \"crv\". The default parameter is secp256k1. Operation key pair code-name: operationKeyPair Generates a cryptographic key pair to operate with. to-do used to produce an Operation Request JWS. Public key representation MAY be present in the DID Document. Public key representation MUST be used to produce Operation Request commitment.\" Public key commitment The resulting commitment obtained by applying the defined commitment scheme to a public key. Update commitment > code-name: updateCommitment The resulting commitment obtained by applying the defined commitment scheme to the public key of an update key pair. Recovery commitment > code-name: recoveryCommitment The resulting commitment obtained by applying the defined commitment scheme to the public key of a recovery key pair. Commitment scheme A cryptographic primitive that allows one to commit to a chosen value, known as the commit value resulting in the generation of a commitment. A commitment can then be shared without revealing the commit value forming a proof of commitment where the possessor of the commit value can then later reveal the commit value proving the original commitment. Public key commitment scheme Commitment scheme steps to generate a public key commitment from a public key: Encode the public key into the form of a valid JWK. Canonicalize the JWK encoded public key using the JSON Canonicalization Scheme Apply the defined HASH_ALGORITHM to the canonicalized public key to produce the public key commitment. Implementers MUST NOT re-use public keys across different commitment invocations. Signature algorithm The SIGNATURE_ALGORITHM is the asymmetric public key signature algorithm, which MUST be a valid JWS \"alg\". The default parameter is ES256K. Commitment hash The COMMITMENT_HASH is a cryptographically random hash of a value to be revealed in the next operation. The default parameter is 32 bytes. Reveal value The REVEAL_VALUE is a cryptographically random value to be revealed in the next operation. The default parameter is 100 bytes. to-do dive into MAX_ENCODED_HASH_LENGHT and GENESIS_TIME","title":"Sidetree"},{"location":"sidetree/#sidetree-protocol","text":"Sidetree protocol terminology and default parameters in tyronZIL. Intro. to-do","title":"Sidetree protocol"},{"location":"sidetree/#anchor-file","text":"An Anchor file is a JSON document containing proving and index data for the create, recovery and deactivate operations, as well as a CAS URI for the associated Map file. This file is anchored to the Zilliqa blockchain through a Sidetree transaction . The maximum size of a compressed Anchor file (MAX_ANCHOR_FILE_SIZE) has a default parameter of 1 MB.","title":"Anchor file"},{"location":"sidetree/#map-file","text":"A Map file is a JSON document containing proving and index data for the Update operation, as well as a CAS URI for the associated Chunk file. The maximum size of a compressed Map file (MAX_MAP_FILE_SIZE) has a default parameter of 1 MB.","title":"Map file"},{"location":"sidetree/#chunk-file","text":"A Chunk file is a JSON document containing all verbose operation data for the corresponding set of DIDs specified in the corresponding Map file. The maximum size of a compressed Chunk file (MAX_CHUNK_FILE_SIZE) has a default parameter of 10 MB.","title":"Chunk file"},{"location":"sidetree/#cas","text":"CAS stands for content-addressable storage. The CAS protocol utilized by tyronZIL is IPFS.","title":"CAS"},{"location":"sidetree/#cas-uri","text":"A CAS URI is a unique content-bound identifier used to locate a specific resource via the CAS protocol. The default CAS_URI_ALGORITHM to generate the CAS URI is IPFS CID.","title":"CAS URI"},{"location":"sidetree/#did-suffix","text":"A DID suffix is the unique identifier string in a Decentralized Identifier, the last part of the DID after the final colon.","title":"DID suffix"},{"location":"sidetree/#sidetree-operation-request","text":"A Sidetree operation request is a wweration in a batch of operations.","title":"Sidetree operation request"},{"location":"sidetree/#sidetree-did-operation","text":"A Sidetree DID operation is a set of delta-based modifications that change the state of a DID document when applied. The maximum uncompressed operation size (MAX_OPERATION_SIZE) has a default parameter of 1 kb.","title":"Sidetree DID operation"},{"location":"sidetree/#sidetree-transaction","text":"A Sidetree transaction writes an Anchor string in a DLT transaction of the underlying ledger.","title":"Sidetree transaction"},{"location":"sidetree/#anchor-string","text":"An Anchor string is the string anchored to the ledger, composed of the CAS URI of an Anchor file prefixed with the declared operation count. The maximum number of operations per batch (MAX_OPERATION_COUNT) has a default parameter of 10,000.","title":"Anchor string"},{"location":"sidetree/#sidetree-transaction-number","text":"The Sidetreee transaction number is a monotonically increasing number deterministically ordered and assigned to every transaction relative to its position in the ledger time.","title":"Sidetree transaction number"},{"location":"sidetree/#ledger-time","text":"code-name: ledgerTime The ledger time is the deterministic clock variable of the underlying blockchain that is used as a deterministic chronological reference.","title":"Ledger time"},{"location":"sidetree/#hash-algorithm","text":"The HASH_ALGORITH is the algorithm to generate hashes of protocol-related values. The default parameter is SHA256.","title":"Hash algorithm"},{"location":"sidetree/#hash-protocol","text":"The HASH_PROTOCOL is the protocol to generate hash representations using the HASH_ALGORITHM. The default parameter is Multihash , a protocol for differentiating outputs from common cryptographic hash functions, addressing size and encoding considerations.","title":"Hash protocol"},{"location":"sidetree/#data-encoding-scheme","text":"The DATA_ENCODING_SCHEME is the encoding for various data structures such as JSON and hashes, which MUST have its output in ASCII format. The default parameter is Base64URL.","title":"Data encoding scheme"},{"location":"sidetree/#key-algorithm","text":"The KEY_ALGORITHM is the asymmetric public key algorithm to sign DID operations, which MUST be a valid JWK \"crv\". The default parameter is secp256k1.","title":"Key algorithm"},{"location":"sidetree/#operation-key-pair","text":"code-name: operationKeyPair Generates a cryptographic key pair to operate with. to-do used to produce an Operation Request JWS. Public key representation MAY be present in the DID Document. Public key representation MUST be used to produce Operation Request commitment.\"","title":"Operation key pair"},{"location":"sidetree/#public-key-commitment","text":"The resulting commitment obtained by applying the defined commitment scheme to a public key. Update commitment > code-name: updateCommitment The resulting commitment obtained by applying the defined commitment scheme to the public key of an update key pair. Recovery commitment > code-name: recoveryCommitment The resulting commitment obtained by applying the defined commitment scheme to the public key of a recovery key pair.","title":"Public key commitment"},{"location":"sidetree/#commitment-scheme","text":"A cryptographic primitive that allows one to commit to a chosen value, known as the commit value resulting in the generation of a commitment. A commitment can then be shared without revealing the commit value forming a proof of commitment where the possessor of the commit value can then later reveal the commit value proving the original commitment.","title":"Commitment scheme"},{"location":"sidetree/#public-key-commitment-scheme","text":"Commitment scheme steps to generate a public key commitment from a public key: Encode the public key into the form of a valid JWK. Canonicalize the JWK encoded public key using the JSON Canonicalization Scheme Apply the defined HASH_ALGORITHM to the canonicalized public key to produce the public key commitment. Implementers MUST NOT re-use public keys across different commitment invocations.","title":"Public key commitment scheme"},{"location":"sidetree/#signature-algorithm","text":"The SIGNATURE_ALGORITHM is the asymmetric public key signature algorithm, which MUST be a valid JWS \"alg\". The default parameter is ES256K.","title":"Signature algorithm"},{"location":"sidetree/#commitment-hash","text":"The COMMITMENT_HASH is a cryptographically random hash of a value to be revealed in the next operation. The default parameter is 32 bytes.","title":"Commitment hash"},{"location":"sidetree/#reveal-value","text":"The REVEAL_VALUE is a cryptographically random value to be revealed in the next operation. The default parameter is 100 bytes. to-do dive into MAX_ENCODED_HASH_LENGHT and GENESIS_TIME","title":"Reveal value"},{"location":"operations/tyronZIL-operations/","text":"tyronZIL DID operations TyronZIL DID operations are: to-do code-name: This section specifies how the tyronZIL-js client is used to perform the create, read, update and deactivate operations. Create code-name: DidCreate How to create a DID and its associated DID document. to-do: explore import CreateOperation from '../../lib/core/versions/latest/CreateOperation'; Read How to use a DID to request its DID document. This operation corresponds to the DID resolution process. Update How to update a DID document, including the cryptographic operations necessary to establish proof of control. to-do specify what properties can be updated Deactivate How to deactivate a DID, including the cryptographic operations necessary to establish proof of deactivation. Sidetree OperationType The Sidetree OperationType MUST be an enum defined as follows: enum OperationType { Create = 'create', Update = 'update', Deactivate = 'deactivate', Recover = 'recover' } Defined in sidetree/lib/core/enums/OperationType.ts .","title":"About"},{"location":"operations/tyronZIL-operations/#tyronzil-did-operations","text":"TyronZIL DID operations are: to-do code-name: This section specifies how the tyronZIL-js client is used to perform the create, read, update and deactivate operations.","title":"tyronZIL DID operations"},{"location":"operations/tyronZIL-operations/#create","text":"code-name: DidCreate How to create a DID and its associated DID document. to-do: explore import CreateOperation from '../../lib/core/versions/latest/CreateOperation';","title":"Create"},{"location":"operations/tyronZIL-operations/#read","text":"How to use a DID to request its DID document. This operation corresponds to the DID resolution process.","title":"Read"},{"location":"operations/tyronZIL-operations/#update","text":"How to update a DID document, including the cryptographic operations necessary to establish proof of control. to-do specify what properties can be updated","title":"Update"},{"location":"operations/tyronZIL-operations/#deactivate","text":"How to deactivate a DID, including the cryptographic operations necessary to establish proof of deactivation.","title":"Deactivate"},{"location":"operations/tyronZIL-operations/#sidetree-operationtype","text":"The Sidetree OperationType MUST be an enum defined as follows: enum OperationType { Create = 'create', Update = 'update', Deactivate = 'deactivate', Recover = 'recover' } Defined in sidetree/lib/core/enums/OperationType.ts .","title":"Sidetree OperationType"},{"location":"operations/CRUD/did-create/","text":"","title":"Create"},{"location":"operations/CRUD/did-deactivate/","text":"","title":"Deactivate"},{"location":"operations/CRUD/did-recover/","text":"","title":"Recover"},{"location":"operations/CRUD/did-resolution/","text":"Resolution It corresponds to the READ operation of a DID. The DID resolution function resolves a DID into its DID document by performing the process called DID resolution. A DID resolver is the software component that executes the DID resolution function. It takes a DID (and metadata) as input and produces a conforming DID document (and metadata) as output. DID URL dereferencing DID URL dereferencing is the process that returns the particular resource specified by the DID URL. It can use the DID resolution function to fetch the DID document and then it performs additional processing on the DID document to return the dereferenced resource that was requested. The software component is called DID URL dereferencer, and it takes as input a DID URL, a DID document and a set of dereferencing options and returns the specific resource. The dereferencing options control how the resource is dereferenced. DID resolution variables Input variables did : A conformant DID as a single string. This is the DID to resolve. This input is REQUIRED. did-resolution-input-metadata : A metadata structure consisting of input options to the resolve function in addition to the DID itself. This input is REQUIRED, but the structure MAY be empty. The options control how the DID is resolved. Output variables did-resolution-metadata : A metadata structure consisting of values relating to the results of the DID resolution process. This structure is REQUIRED and MUST NOT be empty. This metadata typically changes between invocations of the resolve function as it represents data about the resolution process itself. did-document-stream : This MUST be a byte stream of the resolved DID document in one of the conformant representations. The byte stream MAY then be parsed by the caller of the resolve function into a DID document abstract data model, which can in turn be validated and processed. If the resolution is unsuccessful, this value MUST be an empty stream. did-document-metadata : This MUST be a metadata structure. This structure contains metadata about the DID document contained in the did-document-stream. This metadata typically does not change between invocations of the resolve function unless the DID document changes, as it represents data about the DID document. If the resolution is unsuccessful, this output MUST be an empty metadata structure.","title":"Resolve"},{"location":"operations/CRUD/did-resolution/#resolution","text":"It corresponds to the READ operation of a DID. The DID resolution function resolves a DID into its DID document by performing the process called DID resolution. A DID resolver is the software component that executes the DID resolution function. It takes a DID (and metadata) as input and produces a conforming DID document (and metadata) as output.","title":"Resolution"},{"location":"operations/CRUD/did-resolution/#did-url-dereferencing","text":"DID URL dereferencing is the process that returns the particular resource specified by the DID URL. It can use the DID resolution function to fetch the DID document and then it performs additional processing on the DID document to return the dereferenced resource that was requested. The software component is called DID URL dereferencer, and it takes as input a DID URL, a DID document and a set of dereferencing options and returns the specific resource. The dereferencing options control how the resource is dereferenced.","title":"DID URL dereferencing"},{"location":"operations/CRUD/did-resolution/#did-resolution-variables","text":"","title":"DID resolution variables"},{"location":"operations/CRUD/did-resolution/#input-variables","text":"did : A conformant DID as a single string. This is the DID to resolve. This input is REQUIRED. did-resolution-input-metadata : A metadata structure consisting of input options to the resolve function in addition to the DID itself. This input is REQUIRED, but the structure MAY be empty. The options control how the DID is resolved.","title":"Input variables"},{"location":"operations/CRUD/did-resolution/#output-variables","text":"did-resolution-metadata : A metadata structure consisting of values relating to the results of the DID resolution process. This structure is REQUIRED and MUST NOT be empty. This metadata typically changes between invocations of the resolve function as it represents data about the resolution process itself. did-document-stream : This MUST be a byte stream of the resolved DID document in one of the conformant representations. The byte stream MAY then be parsed by the caller of the resolve function into a DID document abstract data model, which can in turn be validated and processed. If the resolution is unsuccessful, this value MUST be an empty stream. did-document-metadata : This MUST be a metadata structure. This structure contains metadata about the DID document contained in the did-document-stream. This metadata typically does not change between invocations of the resolve function unless the DID document changes, as it represents data about the DID document. If the resolution is unsuccessful, this output MUST be an empty metadata structure.","title":"Output variables"},{"location":"operations/CRUD/did-update/","text":"","title":"Update"}]}