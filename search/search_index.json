{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Decentralized Identifier Method Specification The user of Tyron is the owner of its immutable, decentralized identity smart contract. DID dapps: DIDxWallet: decentralized identifier smart wallet INIT.tyron: SSI initialization & DNS smart contract. Smart contracts on Zilliqa get written in Scilla (Smart Contract Intermediate-Level Language) that has a design focused on safety, imposing a language structure that makes applications less vulnerable to attacks by eliminating known vulnerabilities directly at the language level. Scilla provides formal verification with embedding into the Coq proof assistant . The tyronzil DID Method is part of the W3C DID Specification Registries and the first DID Method for the Zilliqa blockchain platform, funded by ZILHive Innovation track. Scheme: DID Scheme DID-URL syntax DID Document DID CRUD operations: Create Resolve Recover Update Deactivate Security & privacy considerations Parameters Models Conformance The tyronzil DID Method specification is conformant with the World Wide Web Consortium (W3C) Decentralized Identifiers (DIDs) v1.0 specification. W3C DIDs terminology The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in RFC 2119 . Versions get organized by Semantic Versioning . Off-chain software SSI client for Node.j: tyronzil JavaScript library: tyron.js React web app: SSI Browser","title":"Welcome"},{"location":"#decentralized-identifier-method-specification","text":"The user of Tyron is the owner of its immutable, decentralized identity smart contract. DID dapps: DIDxWallet: decentralized identifier smart wallet INIT.tyron: SSI initialization & DNS smart contract. Smart contracts on Zilliqa get written in Scilla (Smart Contract Intermediate-Level Language) that has a design focused on safety, imposing a language structure that makes applications less vulnerable to attacks by eliminating known vulnerabilities directly at the language level. Scilla provides formal verification with embedding into the Coq proof assistant . The tyronzil DID Method is part of the W3C DID Specification Registries and the first DID Method for the Zilliqa blockchain platform, funded by ZILHive Innovation track. Scheme: DID Scheme DID-URL syntax DID Document DID CRUD operations: Create Resolve Recover Update Deactivate Security & privacy considerations Parameters Models","title":"Decentralized Identifier Method Specification"},{"location":"#conformance","text":"The tyronzil DID Method specification is conformant with the World Wide Web Consortium (W3C) Decentralized Identifiers (DIDs) v1.0 specification. W3C DIDs terminology The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in RFC 2119 . Versions get organized by Semantic Versioning .","title":"Conformance"},{"location":"#off-chain-software","text":"SSI client for Node.j: tyronzil JavaScript library: tyron.js React web app: SSI Browser","title":"Off-chain software"},{"location":"W3C-dids/","text":"W3C Decentralized Identifiers This DID Method refers to the following terms specified in W3C Decentralized Identifiers (DIDs) v1.0 : DID Method A DID Method is a specification for the precise scheme of a DID, and it also specifies the methods creating, resolving, updating and deactivating such a DID and its DID Document, using a specific type of verifiable data registry, in tyronzil's case, Zilliqa. Decentralized Identifier (DID) A DID is a globally unique Uniform Resource Identifier (URI) that associates a DID Subject with a DID Document. Given the decentralized nature of Zilliqa, a Tyron DID has its existence guaranteed without depending on a central authority. A DID consists of three parts: The scheme identifier: \"did\" The DID Method identifier The DID Method-specific identifier, which must be unique The Tyron DID Scheme . DID URL A DID URL identifies a particular resource to be located, e.g. a specific part of the DID Document. It extends the syntax of a basic DID to incorporate other standard URI components: Path: The portion of a DID URL that begins with and includes the first forward slash character, \"/\" Query: The portion of a DID URL that follows the first question mark character, \"?\" Fragment: The portion of a DID URL that follows the first hash sign character \"#\" DID Subject The DID Subject is the entity identified by the DID and described by the DID Document - the user of the Decentralized Identifier. DID Controller The DID Controller is the entity that has the capability - as defined by the DID Method - to make changes to a DID Document. DID Document A DID is resolvable to a DID Document, which contains data associated with the DID, such as cryptographic material, verification methods and service endpoints relevant to interactions with the DID Subject. The DID itself is the value of the id property. Read the Tyron DID Document specification here . Verification method A verification method is a set of parameters used to independently verify a proof according to the particular DID Method, e.g. a public key. Verification relationship It expresses the relationship between the DID Subject and a verification method, e.g. authentication. All verification methods must be associated with a particular verification relationship. Producer A producer is any algorithm realized as software/hardware that conforms to the W3C DIDs specification by generating conforming DIDs or conforming DID documents. A producer that is conformant with the specification MUST NOT produce non-conforming DIDs or DID documents. Producers MUST indicate which representation of a document corresponds via a 'contentType' in the document's resolution-metadata. Consumer A consumer is any algorithm realized as software/hardware that conforms to the W3C DIDs specification by consuming conforming DIDs or conforming DID documents. A consumer that is conformant with the specification MUST produce errors when consuming non-conforming DIDs or DID documents. Consumers MUST determine which is the representation of the DID Document via the 'contentType' DID resolver metadata field.","title":"W3C DIDs terminology"},{"location":"W3C-dids/#w3c-decentralized-identifiers","text":"This DID Method refers to the following terms specified in W3C Decentralized Identifiers (DIDs) v1.0 :","title":"W3C Decentralized Identifiers"},{"location":"W3C-dids/#did-method","text":"A DID Method is a specification for the precise scheme of a DID, and it also specifies the methods creating, resolving, updating and deactivating such a DID and its DID Document, using a specific type of verifiable data registry, in tyronzil's case, Zilliqa.","title":"DID Method"},{"location":"W3C-dids/#decentralized-identifier-did","text":"A DID is a globally unique Uniform Resource Identifier (URI) that associates a DID Subject with a DID Document. Given the decentralized nature of Zilliqa, a Tyron DID has its existence guaranteed without depending on a central authority. A DID consists of three parts: The scheme identifier: \"did\" The DID Method identifier The DID Method-specific identifier, which must be unique The Tyron DID Scheme .","title":"Decentralized Identifier (DID)"},{"location":"W3C-dids/#did-url","text":"A DID URL identifies a particular resource to be located, e.g. a specific part of the DID Document. It extends the syntax of a basic DID to incorporate other standard URI components: Path: The portion of a DID URL that begins with and includes the first forward slash character, \"/\" Query: The portion of a DID URL that follows the first question mark character, \"?\" Fragment: The portion of a DID URL that follows the first hash sign character \"#\"","title":"DID URL"},{"location":"W3C-dids/#did-subject","text":"The DID Subject is the entity identified by the DID and described by the DID Document - the user of the Decentralized Identifier.","title":"DID Subject"},{"location":"W3C-dids/#did-controller","text":"The DID Controller is the entity that has the capability - as defined by the DID Method - to make changes to a DID Document.","title":"DID Controller"},{"location":"W3C-dids/#did-document","text":"A DID is resolvable to a DID Document, which contains data associated with the DID, such as cryptographic material, verification methods and service endpoints relevant to interactions with the DID Subject. The DID itself is the value of the id property. Read the Tyron DID Document specification here .","title":"DID Document"},{"location":"W3C-dids/#verification-method","text":"A verification method is a set of parameters used to independently verify a proof according to the particular DID Method, e.g. a public key.","title":"Verification method"},{"location":"W3C-dids/#verification-relationship","text":"It expresses the relationship between the DID Subject and a verification method, e.g. authentication. All verification methods must be associated with a particular verification relationship.","title":"Verification relationship"},{"location":"W3C-dids/#producer","text":"A producer is any algorithm realized as software/hardware that conforms to the W3C DIDs specification by generating conforming DIDs or conforming DID documents. A producer that is conformant with the specification MUST NOT produce non-conforming DIDs or DID documents. Producers MUST indicate which representation of a document corresponds via a 'contentType' in the document's resolution-metadata.","title":"Producer"},{"location":"W3C-dids/#consumer","text":"A consumer is any algorithm realized as software/hardware that conforms to the W3C DIDs specification by consuming conforming DIDs or conforming DID documents. A consumer that is conformant with the specification MUST produce errors when consuming non-conforming DIDs or DID documents. Consumers MUST determine which is the representation of the DID Document via the 'contentType' DID resolver metadata field.","title":"Consumer"},{"location":"did-document/","text":"Tyron DID Document For an introduction, read this . A DID Document is a graph-based data structure, a collection of property-value pairs, serialized according to a particular syntax. The Tyron DID Document's serialization format is JSON : It defines an unambiguous encoding and decoding of all properties and their associated values It MUST be a single JSON object conforming to RFC8259, The JavaScript Object Notation (JSON) Data Interchange Format The names of the members of the JSON object MUST correspond to the core property names of the DID Document Property values MUST be: - Numbers for number values representable as IEEE754 - Literal values for boolean ('false', 'true') and empty values ('null') - Arrays for sequence values and unordered sets of values - Objects for sets of properties - Strings for all other values. Consumers MAY further parse these strings into more specific data types such as URIs and date stamps The contentType property in the resolver's metadata MUST be application/did+json : - Which is the associated IANA-registered MIME type, with its corresponding rules to process the fragment - Producers MUST write this type in the document's metadata, and consumers MUST validate it as well Consumers MUST ignore unknown object member names as unknown properties Core properties 1. id The id value MUST be a single valid Tyron DID itself, e.g.: { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9\" } A W3C DID Document MUST include the id property, which denotes the DID-Subject . 2. publicKey The publicKey property is the main verification method . The publicKey value MUST be an array of objects of type VerificationMethodModel , e.g.: { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9\", \"publicKey\": [ { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#keyID-1\", \"type\": \"SchnorrSecp256k1VerificationKey2019\", \"publicKeyBase58\": \"sPKxpZouU4wtdYsTN6a9nJtkfEYPPebSGVsz9ZWJPU3N\" }, { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#keyID-2\", \"type\": \"SchnorrSecp256k1VerificationKey2019\", \"publicKeyBase58\": \"tfJRkK8kEu8YFML8bwpkZwzo8YXDFhfFuryfGQAtw4jg\" } ] } All verification methods MUST have the following properties: id : Its value MUST be a unique Tyron DID-URL. There MUST NOT be multiple verification method objects with the same id-value - otherwise the consumer MUST produce an error type : Its value MUST be exactly one verification method type. The Tyron default type is currently SchnorrSecp256k1VerificationKey2019 publicKeyBase58 : the secp256k1 public key value encoded as a raw 32-byte string in Base58 Bitcoin format Before processing them into the DID Document, each verification method has a property called purpose . It states the functionality of the key, its verification relationship . For public keys, the purpose value MUST be an array of PublicKeyPurpose variants . 3. authentication When the key purpose is PublicKeyPurpose.Auth = 'auth' . The authentication value MUST be an array of verification methods. Each verification method MAY be embedded or referenced, e.g.: { \"authentication\": [ // referenced key: \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#generalKeyID\", // embedded key: { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#onlyAuthKey\", \"type\": \"SchnorrSecp256k1VerificationKey2019\", \"publicKeyBase58\": \"jcJRkK8kEu8YFML8bwpkZwzo8YXDFhfFuryfGQAtw4cd\" } ] } 4. service Tyron service endpoints allow communication with the DID-Subject , from privacy-preserving messaging services to cryptocurrency addresses. The service value MUST be an array of objects of type DidServiceEndpointModel , e.g.: { \"service\": [ { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#did-method\", \"type\": \"website\", \"endpoint\": \"https://www.ssiprotocol.com\" }, { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#account-X\", \"type\": \"zil-address\", \"endpoint\": \"zil1egvj6ketfydy48uqzu8qphhj5w4xrkratv85ht\" } ] } All services MUST have the following properties: id : Its value MUST be a unique Tyron DID-URL with a length no more than fifty (50) ASCII encoded characters. There MUST NOT be multiple keys with the same id-value - otherwise the consumer MUST produce an error type : Its value MUST be a string with a length of no more than thirty (30) ASCII encoded characters endpoint : Its value MUST be a valid URI string (including a scheme segment, i.e. 'https://', 'git://'), with a length of no more than one hundred (100) ASCII encoded characters OR a Zilliqa address If any of the values exceed the specified lengths, the consumer MUST produce an error.","title":"DID Document"},{"location":"did-document/#tyron-did-document","text":"For an introduction, read this . A DID Document is a graph-based data structure, a collection of property-value pairs, serialized according to a particular syntax. The Tyron DID Document's serialization format is JSON : It defines an unambiguous encoding and decoding of all properties and their associated values It MUST be a single JSON object conforming to RFC8259, The JavaScript Object Notation (JSON) Data Interchange Format The names of the members of the JSON object MUST correspond to the core property names of the DID Document Property values MUST be: - Numbers for number values representable as IEEE754 - Literal values for boolean ('false', 'true') and empty values ('null') - Arrays for sequence values and unordered sets of values - Objects for sets of properties - Strings for all other values. Consumers MAY further parse these strings into more specific data types such as URIs and date stamps The contentType property in the resolver's metadata MUST be application/did+json : - Which is the associated IANA-registered MIME type, with its corresponding rules to process the fragment - Producers MUST write this type in the document's metadata, and consumers MUST validate it as well Consumers MUST ignore unknown object member names as unknown properties","title":"Tyron DID Document"},{"location":"did-document/#core-properties","text":"","title":"Core properties"},{"location":"did-document/#1-id","text":"The id value MUST be a single valid Tyron DID itself, e.g.: { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9\" } A W3C DID Document MUST include the id property, which denotes the DID-Subject .","title":"1. id"},{"location":"did-document/#2-publickey","text":"The publicKey property is the main verification method . The publicKey value MUST be an array of objects of type VerificationMethodModel , e.g.: { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9\", \"publicKey\": [ { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#keyID-1\", \"type\": \"SchnorrSecp256k1VerificationKey2019\", \"publicKeyBase58\": \"sPKxpZouU4wtdYsTN6a9nJtkfEYPPebSGVsz9ZWJPU3N\" }, { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#keyID-2\", \"type\": \"SchnorrSecp256k1VerificationKey2019\", \"publicKeyBase58\": \"tfJRkK8kEu8YFML8bwpkZwzo8YXDFhfFuryfGQAtw4jg\" } ] } All verification methods MUST have the following properties: id : Its value MUST be a unique Tyron DID-URL. There MUST NOT be multiple verification method objects with the same id-value - otherwise the consumer MUST produce an error type : Its value MUST be exactly one verification method type. The Tyron default type is currently SchnorrSecp256k1VerificationKey2019 publicKeyBase58 : the secp256k1 public key value encoded as a raw 32-byte string in Base58 Bitcoin format Before processing them into the DID Document, each verification method has a property called purpose . It states the functionality of the key, its verification relationship . For public keys, the purpose value MUST be an array of PublicKeyPurpose variants .","title":"2. publicKey"},{"location":"did-document/#3-authentication","text":"When the key purpose is PublicKeyPurpose.Auth = 'auth' . The authentication value MUST be an array of verification methods. Each verification method MAY be embedded or referenced, e.g.: { \"authentication\": [ // referenced key: \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#generalKeyID\", // embedded key: { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#onlyAuthKey\", \"type\": \"SchnorrSecp256k1VerificationKey2019\", \"publicKeyBase58\": \"jcJRkK8kEu8YFML8bwpkZwzo8YXDFhfFuryfGQAtw4cd\" } ] }","title":"3. authentication"},{"location":"did-document/#4-service","text":"Tyron service endpoints allow communication with the DID-Subject , from privacy-preserving messaging services to cryptocurrency addresses. The service value MUST be an array of objects of type DidServiceEndpointModel , e.g.: { \"service\": [ { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#did-method\", \"type\": \"website\", \"endpoint\": \"https://www.ssiprotocol.com\" }, { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#account-X\", \"type\": \"zil-address\", \"endpoint\": \"zil1egvj6ketfydy48uqzu8qphhj5w4xrkratv85ht\" } ] } All services MUST have the following properties: id : Its value MUST be a unique Tyron DID-URL with a length no more than fifty (50) ASCII encoded characters. There MUST NOT be multiple keys with the same id-value - otherwise the consumer MUST produce an error type : Its value MUST be a string with a length of no more than thirty (30) ASCII encoded characters endpoint : Its value MUST be a valid URI string (including a scheme segment, i.e. 'https://', 'git://'), with a length of no more than one hundred (100) ASCII encoded characters OR a Zilliqa address If any of the values exceed the specified lengths, the consumer MUST produce an error.","title":"4. service"},{"location":"protocol-parameters/","text":"Protocol parameters DID Keys The Tyron SSI Protocol defines 3 pairs of DID Keys generated by the KEY_ALGORITHM : did_contract_owner : The user's Zilliqa account is the sole owner of their DID smart contract, and the subject and controller of their Dececentralized Identifier. The contract_owner is the hex-encoded address corresponding to this key. did_update_keys : To execute a DID Update operation, the updated DID Document must get signed by these keys, which the DID contract verifies with IsRightSignature procedure. did_recovery_keys : To execute a DID Recover or DID Deactivate operation, the user MUST possess the private did_recovery_key that corresponds to the public did_recovery_key stored in the DID contract, which gets verified by the IsRightSignature procedure. The update & recovery keys MUST only get utilized once, which the Self-Sovereign Identity verifies with the IsValidKey procedure. The corresponding private keys MUST always be in control of their user. Tyron Hash Empowered by Scilla, the DID smart contract produces the Tyron Hash by applying the HASH_ALGORITHM on the Decentralized Identifier. The Tyron Hash must be signed to deactivate the DID. The Tyron SSI Protocol implements several parameters defined by the Sidetree Protocol (a layer-2 solution on top of the Bitcoin network): Transaction number The transaction number is a monotonically increasing number. Its order is deterministic and assigned to every transaction according to its position in the ledger time. Every Self-Sovereign Identity has a corresponding DID smart contract that keeps track of the DID State and assigns a transaction number to every consecutive transaction. Ledger time The ledger time is the blockchain clock variable, used as a deterministic chronological reference. DID Suffix A DID Suffix is the unique identifier string in a Decentralized Identifier, the last part of the DID after the final colon. Hash algorithm The HASH_ALGORITH is the algorithm to generate hashes of protocol-related values. The default parameter is SHA256. Data encoding scheme The DATA_ENCODING_SCHEME is the encoding for various data structures such as JSON and strings, which MUST have its output in ASCII format. The default parameter is hex (hexadecimal, base16). Key algorithm The KEY_ALGORITHM is the asymmetric public key algorithm. The default parameter is secp256k1. Operation key pair Generates a cryptographic key pair to operate with, using the KEY_ALGORITHM. It returns the public key as a PublicKeyModel and the private key as a hex-encoded secp256k1 key. Signature algorithm The SIGNATURE_ALGORITHM is the asymmetric public key signature algorithm. The default parameter is Schnorr. The DID smart contract can verify that all Schnorr signatures correspond to the DID Keys defined above, by executing the IsRightSignature procedure. DID State patch A DID State patch is the Sidetree format to describe the mutations of the DID's metadata state. Its data structure corresponds with the Patch model , which MUST include a Patch action and the document to be patched.","title":"Parameters"},{"location":"protocol-parameters/#protocol-parameters","text":"","title":"Protocol parameters"},{"location":"protocol-parameters/#did-keys","text":"The Tyron SSI Protocol defines 3 pairs of DID Keys generated by the KEY_ALGORITHM : did_contract_owner : The user's Zilliqa account is the sole owner of their DID smart contract, and the subject and controller of their Dececentralized Identifier. The contract_owner is the hex-encoded address corresponding to this key. did_update_keys : To execute a DID Update operation, the updated DID Document must get signed by these keys, which the DID contract verifies with IsRightSignature procedure. did_recovery_keys : To execute a DID Recover or DID Deactivate operation, the user MUST possess the private did_recovery_key that corresponds to the public did_recovery_key stored in the DID contract, which gets verified by the IsRightSignature procedure. The update & recovery keys MUST only get utilized once, which the Self-Sovereign Identity verifies with the IsValidKey procedure. The corresponding private keys MUST always be in control of their user.","title":"DID Keys"},{"location":"protocol-parameters/#tyron-hash","text":"Empowered by Scilla, the DID smart contract produces the Tyron Hash by applying the HASH_ALGORITHM on the Decentralized Identifier. The Tyron Hash must be signed to deactivate the DID. The Tyron SSI Protocol implements several parameters defined by the Sidetree Protocol (a layer-2 solution on top of the Bitcoin network):","title":"Tyron Hash"},{"location":"protocol-parameters/#transaction-number","text":"The transaction number is a monotonically increasing number. Its order is deterministic and assigned to every transaction according to its position in the ledger time. Every Self-Sovereign Identity has a corresponding DID smart contract that keeps track of the DID State and assigns a transaction number to every consecutive transaction.","title":"Transaction number"},{"location":"protocol-parameters/#ledger-time","text":"The ledger time is the blockchain clock variable, used as a deterministic chronological reference.","title":"Ledger time"},{"location":"protocol-parameters/#did-suffix","text":"A DID Suffix is the unique identifier string in a Decentralized Identifier, the last part of the DID after the final colon.","title":"DID Suffix"},{"location":"protocol-parameters/#hash-algorithm","text":"The HASH_ALGORITH is the algorithm to generate hashes of protocol-related values. The default parameter is SHA256.","title":"Hash algorithm"},{"location":"protocol-parameters/#data-encoding-scheme","text":"The DATA_ENCODING_SCHEME is the encoding for various data structures such as JSON and strings, which MUST have its output in ASCII format. The default parameter is hex (hexadecimal, base16).","title":"Data encoding scheme"},{"location":"protocol-parameters/#key-algorithm","text":"The KEY_ALGORITHM is the asymmetric public key algorithm. The default parameter is secp256k1.","title":"Key algorithm"},{"location":"protocol-parameters/#operation-key-pair","text":"Generates a cryptographic key pair to operate with, using the KEY_ALGORITHM. It returns the public key as a PublicKeyModel and the private key as a hex-encoded secp256k1 key.","title":"Operation key pair"},{"location":"protocol-parameters/#signature-algorithm","text":"The SIGNATURE_ALGORITHM is the asymmetric public key signature algorithm. The default parameter is Schnorr. The DID smart contract can verify that all Schnorr signatures correspond to the DID Keys defined above, by executing the IsRightSignature procedure.","title":"Signature algorithm"},{"location":"protocol-parameters/#did-state-patch","text":"A DID State patch is the Sidetree format to describe the mutations of the DID's metadata state. Its data structure corresponds with the Patch model , which MUST include a Patch action and the document to be patched.","title":"DID State patch"},{"location":"security-privacy/","text":"Security & privacy considerations Tyron DIDs operate on Zilliqa, a public blockchain platform that implements PBFT (practical byzantine fault tolerance) as the consensus protocol, as explained in the Zilliqa's whitepaper . Given the 'public' nature of the network, Tyron anticipates that messages could be read, or corrupted in case of chain-reorganization. However, as long as there is no 51% attack the ledger's immutability, on which DIDs rely on, remains uncompromised. The tyronzil SSI client currently interacts with Zilliqa nodes hosted by Zilliqa Research Pte. Ltd. as can be seen in the open-source code . It is also possible to submit transactions to any other node. To interact with the user's DID smart contract, the client MUST submit a blockchain transaction. All Zilliqa transactions require an increasing nonce, mitigating this way replay attacks. The user can check their DID smart contract on, e.g. Devex to confirm that their operation did not get delayed. Furthermore, timestamps are supported and coded into the DID contract. Smart contract security Scilla implements smart contract safety at the language level with formal verification. It utilizes the Coq Proof Assistant for mechanized proofs about programs' properties. Key revocation, DID recovery & deactivation If a key is compromised, it is possible to remove it through a DID Update operation with a 'RemoveKeys' patch-action. To perform a DID operation, the user MUST posess the private did_update_key that corresponds to the public did_update_key stored in the DID smart contract, ensuring that any insertion, deletion or modification happens under stipulated terms. If the private did_update_key is compromised, the user can request a DID Recover operation to replace their DID State, completely. The DID Deactivate operation is also supported as long as the private did_recovery_key is not compromised. Privacy Considerations This DID Method focuses on principle #7 of Privacy by Design: \"Respect for user privacy \u2014 keep it user-centric\". As a consequence, the user as the DID Subject is the sole DID Controller of their Decentralized Identifier. Keep Personally-Identifiable Information (PII) private Given that Zilliqa is a public & decentralized network, personal data MUST NOT get included in the DID Document , ensuring the user's right to be forgotten All personal information MUST exist behind service endpoints, under the user's control. The exchange of personal data MUST occur on private, peer-to-peer communication channels. Correlation risk The user MUST be aware that if using their Tyron DID with more than one party, then they are implicitly authorizing correlation between those parties. To mitigate this, a user can have as many Decentralized Identifiers as needed to engage in pairwise interactions. Either way, correlation can still occur if the same keys or personal service endpoints get used in different DID documents. Unique endpoints allow traffic to be easily correlated, so a better strategy is to share an endpoint among many DIDs. Tyron assumes uncompromised endpoints.","title":"Security & privacy"},{"location":"security-privacy/#security-privacy-considerations","text":"Tyron DIDs operate on Zilliqa, a public blockchain platform that implements PBFT (practical byzantine fault tolerance) as the consensus protocol, as explained in the Zilliqa's whitepaper . Given the 'public' nature of the network, Tyron anticipates that messages could be read, or corrupted in case of chain-reorganization. However, as long as there is no 51% attack the ledger's immutability, on which DIDs rely on, remains uncompromised. The tyronzil SSI client currently interacts with Zilliqa nodes hosted by Zilliqa Research Pte. Ltd. as can be seen in the open-source code . It is also possible to submit transactions to any other node. To interact with the user's DID smart contract, the client MUST submit a blockchain transaction. All Zilliqa transactions require an increasing nonce, mitigating this way replay attacks. The user can check their DID smart contract on, e.g. Devex to confirm that their operation did not get delayed. Furthermore, timestamps are supported and coded into the DID contract.","title":"Security &amp; privacy considerations"},{"location":"security-privacy/#smart-contract-security","text":"Scilla implements smart contract safety at the language level with formal verification. It utilizes the Coq Proof Assistant for mechanized proofs about programs' properties.","title":"Smart contract security"},{"location":"security-privacy/#key-revocation-did-recovery-deactivation","text":"If a key is compromised, it is possible to remove it through a DID Update operation with a 'RemoveKeys' patch-action. To perform a DID operation, the user MUST posess the private did_update_key that corresponds to the public did_update_key stored in the DID smart contract, ensuring that any insertion, deletion or modification happens under stipulated terms. If the private did_update_key is compromised, the user can request a DID Recover operation to replace their DID State, completely. The DID Deactivate operation is also supported as long as the private did_recovery_key is not compromised.","title":"Key revocation, DID recovery &amp; deactivation"},{"location":"security-privacy/#privacy-considerations","text":"This DID Method focuses on principle #7 of Privacy by Design: \"Respect for user privacy \u2014 keep it user-centric\". As a consequence, the user as the DID Subject is the sole DID Controller of their Decentralized Identifier.","title":"Privacy Considerations"},{"location":"security-privacy/#keep-personally-identifiable-information-pii-private","text":"Given that Zilliqa is a public & decentralized network, personal data MUST NOT get included in the DID Document , ensuring the user's right to be forgotten All personal information MUST exist behind service endpoints, under the user's control. The exchange of personal data MUST occur on private, peer-to-peer communication channels.","title":"Keep Personally-Identifiable Information (PII) private"},{"location":"security-privacy/#correlation-risk","text":"The user MUST be aware that if using their Tyron DID with more than one party, then they are implicitly authorizing correlation between those parties. To mitigate this, a user can have as many Decentralized Identifiers as needed to engage in pairwise interactions. Either way, correlation can still occur if the same keys or personal service endpoints get used in different DID documents. Unique endpoints allow traffic to be easily correlated, so a better strategy is to share an endpoint among many DIDs. Tyron assumes uncompromised endpoints.","title":"Correlation risk"},{"location":"CRUD-operations/did-create/","text":"DID Create transaction It generates a brand new Self-Sovereign Identity out of the DID smart contract code. It defines the Decentralized Identifier, its DID Document and DID State. On the SSI client's side: Initialize with the Zilliqa network (mainnet or testnet), the user's private key and the gas limit. Get the user's input regarding cryptographic keys and service endpoints for the DID Document. Verification methods: With the public key input generate an array of keys, generated using the operation key pair . Services: An array of endpoints. With the verification methods and service endpoints, generate a List Document to send to the DID smart contract. Generate the DID Keys using the KEY_ALGORITH : The update key-pair (necessary for the following Update operation) & the recovery key-pair (needed for any future Recover or Deactivate operation). All private keys MUST be in control of the user. Download, decode (Base64) & decompress the DID-smart-contract code from the INIT.tyron smart contract. Instantiate the DID contract with the user's Zilliqa address as the contract owner and deploy it on the blockchain. Call the init transition of the user's DID contract. Submit the DidCreate tyronzil transaction with its transition parameters (agent, document, updateKey and recoveryKey). The contract owner MUST call this transition for it to be successful. Ask which domain name.did the user would like for their DID contract address and execute the SetSsiDomain transition. On the DID smart contract's side When the DidCreate transition gets called, the DID smart contract proceeds as follows: First, it verifies that the DID Status is initialized by executing the IsRightStatus procedure. Executes the Payment procedure to make the Self-Sovereign Identity work only if the payment is correct. Executes the IsRightCaller procedure to verify that the call comes from the user (contract owner address). Executes the DidScheme procedure, which generates the user's Decentralized Identifier according to the DID Scheme with the DID contract address as the DID Suffix . This procedure also produces the tyron_hash by applying the HASH_ALGORITH to the DID. Executes the UpdateDocument procedure to initialize the verification_methods and services map fields. Applies the IsValidKey procedure to verify that all DID Keys are unique, and then sets the fields did_update_key & did_recovery_key . Sets the DID Status to Created and saves the blocknumber into the created field. Executes the Timestamp procedure. A DID Create tyronzil transaction (incl. the DID smart contract deployment and initialization) consumes approximately 2,200 units of GAS (4.4 ZIL).","title":"Create"},{"location":"CRUD-operations/did-create/#did-create-transaction","text":"It generates a brand new Self-Sovereign Identity out of the DID smart contract code. It defines the Decentralized Identifier, its DID Document and DID State.","title":"DID Create transaction"},{"location":"CRUD-operations/did-create/#on-the-ssi-clients-side","text":"Initialize with the Zilliqa network (mainnet or testnet), the user's private key and the gas limit. Get the user's input regarding cryptographic keys and service endpoints for the DID Document. Verification methods: With the public key input generate an array of keys, generated using the operation key pair . Services: An array of endpoints. With the verification methods and service endpoints, generate a List Document to send to the DID smart contract. Generate the DID Keys using the KEY_ALGORITH : The update key-pair (necessary for the following Update operation) & the recovery key-pair (needed for any future Recover or Deactivate operation). All private keys MUST be in control of the user. Download, decode (Base64) & decompress the DID-smart-contract code from the INIT.tyron smart contract. Instantiate the DID contract with the user's Zilliqa address as the contract owner and deploy it on the blockchain. Call the init transition of the user's DID contract. Submit the DidCreate tyronzil transaction with its transition parameters (agent, document, updateKey and recoveryKey). The contract owner MUST call this transition for it to be successful. Ask which domain name.did the user would like for their DID contract address and execute the SetSsiDomain transition.","title":"On the SSI client's side:"},{"location":"CRUD-operations/did-create/#on-the-did-smart-contracts-side","text":"When the DidCreate transition gets called, the DID smart contract proceeds as follows: First, it verifies that the DID Status is initialized by executing the IsRightStatus procedure. Executes the Payment procedure to make the Self-Sovereign Identity work only if the payment is correct. Executes the IsRightCaller procedure to verify that the call comes from the user (contract owner address). Executes the DidScheme procedure, which generates the user's Decentralized Identifier according to the DID Scheme with the DID contract address as the DID Suffix . This procedure also produces the tyron_hash by applying the HASH_ALGORITH to the DID. Executes the UpdateDocument procedure to initialize the verification_methods and services map fields. Applies the IsValidKey procedure to verify that all DID Keys are unique, and then sets the fields did_update_key & did_recovery_key . Sets the DID Status to Created and saves the blocknumber into the created field. Executes the Timestamp procedure. A DID Create tyronzil transaction (incl. the DID smart contract deployment and initialization) consumes approximately 2,200 units of GAS (4.4 ZIL).","title":"On the DID smart contract's side"},{"location":"CRUD-operations/did-deactivate/","text":"DID Deactivate transaction It completely deactivates the Decentralized Identifier by setting the DID Status to Deactivated and the DID state to None , undefined or Empty . To be able to execute this operation, the user MUST possess the private did_recovery_key . Once the operation request is processed, the user as the contract owner MUST call the DidDeactivate transition of their DID smart contract. This transition is irreversible - after deactivation, the DID contract will never be useful again. Resolving the Decentralized Identifier in future occasions MUST throw a DidDeactivated error. On the SSI client's side: Initialize with the Zilliqa network (mainnet or testnet) & the user's domain name.did to fetch their DID contract from the blockchain. Utilize the user's private did_recovery_key to verify that it corresponds to the public did_recovery_key stored in the DID smart contract. Retrieve the tyron_hash from the user's DID contract and sign it with the pair did_recovery_keys through the SIGNATURE_ALGORITHM . Submit the DidDeactivate tyronzil transaction with its transition parameters (agent and Schnorr signature). The contract owner MUST call this transition for it to be successful. On the DID smart contract's side When the DidDeactivate transition gets called with the proper hex-encoded signature of type ByStr64 as its argument, the DID smart contract proceeds as follows: First, it verifies that the DID Status is operational by executing the IsRightStatus procedure. Executes the Payment procedure to make the Self-Sovereign Identity work only if the payment is correct. Executes the IsRightCaller procedure to verify that the call comes from the user (contract owner address). Fetches the did_recovery_key and the tyron_hash from the contract's state. Performs the IsRightSignature procedure. It verifies that the signature got produced with the did_recovery_keys by applying the Schnorr signature algorithm on the tyron_hash . 5. Sets the DID Status to Deactivated , the verification_methods to Emp String ByStr33 , the services to Emp String Pair String String and both the did_update_key & did_recovery_key to None{ByStr33}. Emits the \"DID_deactivated\" event & executes the Timestamp procedure. A DID Deactivate tyronzil transaction consumes approximately 500 units of GAS (1 ZIL).","title":"Deactivate"},{"location":"CRUD-operations/did-deactivate/#did-deactivate-transaction","text":"It completely deactivates the Decentralized Identifier by setting the DID Status to Deactivated and the DID state to None , undefined or Empty . To be able to execute this operation, the user MUST possess the private did_recovery_key . Once the operation request is processed, the user as the contract owner MUST call the DidDeactivate transition of their DID smart contract. This transition is irreversible - after deactivation, the DID contract will never be useful again. Resolving the Decentralized Identifier in future occasions MUST throw a DidDeactivated error.","title":"DID Deactivate transaction"},{"location":"CRUD-operations/did-deactivate/#on-the-ssi-clients-side","text":"Initialize with the Zilliqa network (mainnet or testnet) & the user's domain name.did to fetch their DID contract from the blockchain. Utilize the user's private did_recovery_key to verify that it corresponds to the public did_recovery_key stored in the DID smart contract. Retrieve the tyron_hash from the user's DID contract and sign it with the pair did_recovery_keys through the SIGNATURE_ALGORITHM . Submit the DidDeactivate tyronzil transaction with its transition parameters (agent and Schnorr signature). The contract owner MUST call this transition for it to be successful.","title":"On the SSI client's side:"},{"location":"CRUD-operations/did-deactivate/#on-the-did-smart-contracts-side","text":"When the DidDeactivate transition gets called with the proper hex-encoded signature of type ByStr64 as its argument, the DID smart contract proceeds as follows: First, it verifies that the DID Status is operational by executing the IsRightStatus procedure. Executes the Payment procedure to make the Self-Sovereign Identity work only if the payment is correct. Executes the IsRightCaller procedure to verify that the call comes from the user (contract owner address). Fetches the did_recovery_key and the tyron_hash from the contract's state. Performs the IsRightSignature procedure. It verifies that the signature got produced with the did_recovery_keys by applying the Schnorr signature algorithm on the tyron_hash . 5. Sets the DID Status to Deactivated , the verification_methods to Emp String ByStr33 , the services to Emp String Pair String String and both the did_update_key & did_recovery_key to None{ByStr33}. Emits the \"DID_deactivated\" event & executes the Timestamp procedure. A DID Deactivate tyronzil transaction consumes approximately 500 units of GAS (1 ZIL).","title":"On the DID smart contract's side"},{"location":"CRUD-operations/did-recover/","text":"DID Recover transaction It fully resets the user's DID State, so they can keep using the same DID with a brand new public-key-infrastructure (PKI). To be able to execute this operation, the user MUST possess the private did_recovery_key . Once the operation request is processed, the user as the contract owner MUST call the DidRecover transition of the user's DID smart contract. On the SSI client's side: Initialize with the Zilliqa network (mainnet or testnet) & the user's domain name.did to fetch the DID contract from the blockchain. Utilize the user's private did_recovery_key to verify that it corresponds to the public did_recovery_key stored in the DID contract. Verification methods: With the public key input generate an array of keys, generated using the operation key pair . Service endpoints: An array of endpoints for the recovered DID. With the verification methods and service endpoints, generate a new List Document to send to the DID smart contract. Hash the document with the HASH_ALGORITHM and sign the hash with the SIGNATURE_ALGORITHM using the did_recovery_keys . Generate new DID Keys using the KEY_ALGORITH : The update key-pair (necessary for the following Update operation) & the recovery key-pair (needed for any future Recover or Deactivate operation). Return the new document, Schnorr signature & public DID Keys. All private keys MUST be in control of the user. Submit the DidRecover tyronzil transaction with its transition parameters (agent, newDocument, docHash, signature, newUpdateKey and newRecoveryKey). The contract owner MUST call this transition for it to be successful. On the DID Smart Contract's side When the DidRecover transition gets called, the DID smart contract proceeds as follows: First, it verifies that the DID Status is operational by executing the IsRightStatus procedure. Executes the Payment procedure to make the Self-Sovereign Identity work only if the payment is correct. Executes the IsRightCaller procedure to verify that the call comes from the user (contract owner address). Performs the IsRightSignature procedure to verify that the signature got produced with the did_recovery_keys by applying the Schnorr signature algorithm. For this verification, the DID contract utilizes the public key that it has stored in the did_recovery_key mutable field. Executes the UpdateDocument procedure to re-initialize the verification_methods and services map fields. Applies the IsValidKey procedure to verify that all new DID Keys are unique (and different from before), and then sets the fields did_update_key & did_recovery_key with the new values. Sets the DID Status to Recovered . Emits a \"DID_recovered\" event & executes the Timestamp procedure. A DID Recover tyronzil transaction consumes approximately 700 units of GAS (1.4 ZIL).","title":"Recover"},{"location":"CRUD-operations/did-recover/#did-recover-transaction","text":"It fully resets the user's DID State, so they can keep using the same DID with a brand new public-key-infrastructure (PKI). To be able to execute this operation, the user MUST possess the private did_recovery_key . Once the operation request is processed, the user as the contract owner MUST call the DidRecover transition of the user's DID smart contract.","title":"DID Recover transaction"},{"location":"CRUD-operations/did-recover/#on-the-ssi-clients-side","text":"Initialize with the Zilliqa network (mainnet or testnet) & the user's domain name.did to fetch the DID contract from the blockchain. Utilize the user's private did_recovery_key to verify that it corresponds to the public did_recovery_key stored in the DID contract. Verification methods: With the public key input generate an array of keys, generated using the operation key pair . Service endpoints: An array of endpoints for the recovered DID. With the verification methods and service endpoints, generate a new List Document to send to the DID smart contract. Hash the document with the HASH_ALGORITHM and sign the hash with the SIGNATURE_ALGORITHM using the did_recovery_keys . Generate new DID Keys using the KEY_ALGORITH : The update key-pair (necessary for the following Update operation) & the recovery key-pair (needed for any future Recover or Deactivate operation). Return the new document, Schnorr signature & public DID Keys. All private keys MUST be in control of the user. Submit the DidRecover tyronzil transaction with its transition parameters (agent, newDocument, docHash, signature, newUpdateKey and newRecoveryKey). The contract owner MUST call this transition for it to be successful.","title":"On the SSI client's side:"},{"location":"CRUD-operations/did-recover/#on-the-did-smart-contracts-side","text":"When the DidRecover transition gets called, the DID smart contract proceeds as follows: First, it verifies that the DID Status is operational by executing the IsRightStatus procedure. Executes the Payment procedure to make the Self-Sovereign Identity work only if the payment is correct. Executes the IsRightCaller procedure to verify that the call comes from the user (contract owner address). Performs the IsRightSignature procedure to verify that the signature got produced with the did_recovery_keys by applying the Schnorr signature algorithm. For this verification, the DID contract utilizes the public key that it has stored in the did_recovery_key mutable field. Executes the UpdateDocument procedure to re-initialize the verification_methods and services map fields. Applies the IsValidKey procedure to verify that all new DID Keys are unique (and different from before), and then sets the fields did_update_key & did_recovery_key with the new values. Sets the DID Status to Recovered . Emits a \"DID_recovered\" event & executes the Timestamp procedure. A DID Recover tyronzil transaction consumes approximately 700 units of GAS (1.4 ZIL).","title":"On the DID Smart Contract's side"},{"location":"CRUD-operations/did-resolve/","text":"Tyron DID Resolve operation DID Resolution It corresponds to the READ operation of a Decentralized Identifier. The DID Resolution function resolves a DID into its DID Document by performing the process called DID Resolution. A DID Resolver is the software component that executes the DID Resolution process. It takes a DID (and metadata) as input and produces a conforming DID Document (and metadata) as output, which is called the DID Resolution Result. Input variables network : The 'NetworkNamespace' referring to the testnet or mainnet. tyronAddr : The Zilliqa address of the user's DID smart contract. metadata : The DID Resolution input metadata is a structure consisting of input options to the resolve function in addition to the DID itself. This input is REQUIRED. The options control how the DID is resolved. tyronzil-v1.0.0 only supports the 'Accept' option that defines if the result shall be the corresponding DID Document with or without the document metadata. The former produces an output called DID Resolution Result. Output variables resolutionMetadata : Data structure consisting of values relating to the results of the DID Resolution process. This structure is REQUIRED and MUST NOT be empty. This metadata typically changes between invocations of the resolve function as it represents data about the resolution process itself. Tyron's resolutionMetadata refers to Zilliqa's GetBlockchainInfo method that returns the network statistics for the specified network at the time of the request. document : This MUST be the resolved DID Document serialized in JSON format. documentMetadata : This structure contains metadata that typically does not change between invocations of the resolve method unless the DID Document changes. Tyron's documentMetadata includes three properties: the contentType equal to \"application/did+json\" and the DID Keys update & recovery. Find the DID Resolution method here . Resolving a deactivated DID If the DID Status is Deactivated in its corresponding DID smart contract, then the DID Resolver MUST throw a DidDeactivated error. DID-URL dereferencing DID-URL dereferencing is the process that returns the particular resource specified by the DID URL. It can use the DID Resolution process to fetch the DID Document and then it performs additional processing on the DID Document to return the dereferenced resource that was requested. The software component is called DID-URL Dereferencer, and it takes as input a DID URL, a DID Document and a set of dereferencing options and returns the specific resource. The dereferencing options control how the resource is dereferenced. DID-URL dereferencing will be supported in future versions of the protocol.","title":"Resolve"},{"location":"CRUD-operations/did-resolve/#tyron-did-resolve-operation","text":"","title":"Tyron DID Resolve operation"},{"location":"CRUD-operations/did-resolve/#did-resolution","text":"It corresponds to the READ operation of a Decentralized Identifier. The DID Resolution function resolves a DID into its DID Document by performing the process called DID Resolution. A DID Resolver is the software component that executes the DID Resolution process. It takes a DID (and metadata) as input and produces a conforming DID Document (and metadata) as output, which is called the DID Resolution Result.","title":"DID Resolution"},{"location":"CRUD-operations/did-resolve/#input-variables","text":"network : The 'NetworkNamespace' referring to the testnet or mainnet. tyronAddr : The Zilliqa address of the user's DID smart contract. metadata : The DID Resolution input metadata is a structure consisting of input options to the resolve function in addition to the DID itself. This input is REQUIRED. The options control how the DID is resolved. tyronzil-v1.0.0 only supports the 'Accept' option that defines if the result shall be the corresponding DID Document with or without the document metadata. The former produces an output called DID Resolution Result.","title":"Input variables"},{"location":"CRUD-operations/did-resolve/#output-variables","text":"resolutionMetadata : Data structure consisting of values relating to the results of the DID Resolution process. This structure is REQUIRED and MUST NOT be empty. This metadata typically changes between invocations of the resolve function as it represents data about the resolution process itself. Tyron's resolutionMetadata refers to Zilliqa's GetBlockchainInfo method that returns the network statistics for the specified network at the time of the request. document : This MUST be the resolved DID Document serialized in JSON format. documentMetadata : This structure contains metadata that typically does not change between invocations of the resolve method unless the DID Document changes. Tyron's documentMetadata includes three properties: the contentType equal to \"application/did+json\" and the DID Keys update & recovery. Find the DID Resolution method here .","title":"Output variables"},{"location":"CRUD-operations/did-resolve/#resolving-a-deactivated-did","text":"If the DID Status is Deactivated in its corresponding DID smart contract, then the DID Resolver MUST throw a DidDeactivated error.","title":"Resolving a deactivated DID"},{"location":"CRUD-operations/did-resolve/#did-url-dereferencing","text":"DID-URL dereferencing is the process that returns the particular resource specified by the DID URL. It can use the DID Resolution process to fetch the DID Document and then it performs additional processing on the DID Document to return the dereferenced resource that was requested. The software component is called DID-URL Dereferencer, and it takes as input a DID URL, a DID Document and a set of dereferencing options and returns the specific resource. The dereferencing options control how the resource is dereferenced. DID-URL dereferencing will be supported in future versions of the protocol.","title":"DID-URL dereferencing"},{"location":"CRUD-operations/did-update/","text":"DID Update transaction It makes modifications to the user's self-sovereign identity (stored in their DID smart contract). To be able to execute this operation, the user MUST possess the private did_update_key . Once the operation request is processed, the contract owner MUST make a call to the DidUpdate transition of the user's DID smart contract. On the SSI client's side: Initialize with the Zilliqa network (mainnet or testnet) & the user's domain name.did to fetch their DID contract from the blockchain. Utilize the user's private did_update_key to verify that it corresponds to the public did_update_key stored in the DID smart contract. Get the user's input regarding the update patch actions , and generate the List Document . Hash the document with the HASH_ALGORITHM and sign the hash with the SIGNATURE_ALGORITHM using the did_update_keys . Generate a new key-pair for the did_update_keys necessary for any future Update operation. Return the new document, hash, Schnorr signature & the new public did_update_key . All private keys MUST be in control of the user. Submit the DidUpdate tyronzil transaction with its transition parameters (agent, newDocument, docHash, signature and newUpdateKey). The contract owner MUST call this transition for it to be successful. On the DID smart contract's side When the DidUpdate transition gets called, the DID smart contract proceeds as follows: First, it verifies that the DID Status is operational by executing the IsRightStatus procedure. Executes the Payment procedure to make the Self-Sovereign Identity work only if the payment is correct. Executes the IsRightCaller procedure to verify that the call comes from the user (contract owner address). Performs the IsRightSignature procedure to verify that the signature got produced with the did_update_keys by applying the Schnorr signature algorithm. For this verification, the DID contract utilizes the public key that it has stored in the did_update_key mutable field. Executes the UpdateDocument procedure to update the verification_methods and services map fields. Applies the IsValidKey procedure to verify that the new public did_update_key is different from any other key. If so, then saves the new key in the did_update_key mutable field. Sets the DID Status to Updated . Emits a \"DID_updated\" event & executes the Timestamp procedure. A DID Update tyronzil transaction consumes approximately 700 units of GAS (1.4 ZIL).","title":"Update"},{"location":"CRUD-operations/did-update/#did-update-transaction","text":"It makes modifications to the user's self-sovereign identity (stored in their DID smart contract). To be able to execute this operation, the user MUST possess the private did_update_key . Once the operation request is processed, the contract owner MUST make a call to the DidUpdate transition of the user's DID smart contract.","title":"DID Update transaction"},{"location":"CRUD-operations/did-update/#on-the-ssi-clients-side","text":"Initialize with the Zilliqa network (mainnet or testnet) & the user's domain name.did to fetch their DID contract from the blockchain. Utilize the user's private did_update_key to verify that it corresponds to the public did_update_key stored in the DID smart contract. Get the user's input regarding the update patch actions , and generate the List Document . Hash the document with the HASH_ALGORITHM and sign the hash with the SIGNATURE_ALGORITHM using the did_update_keys . Generate a new key-pair for the did_update_keys necessary for any future Update operation. Return the new document, hash, Schnorr signature & the new public did_update_key . All private keys MUST be in control of the user. Submit the DidUpdate tyronzil transaction with its transition parameters (agent, newDocument, docHash, signature and newUpdateKey). The contract owner MUST call this transition for it to be successful.","title":"On the SSI client's side:"},{"location":"CRUD-operations/did-update/#on-the-did-smart-contracts-side","text":"When the DidUpdate transition gets called, the DID smart contract proceeds as follows: First, it verifies that the DID Status is operational by executing the IsRightStatus procedure. Executes the Payment procedure to make the Self-Sovereign Identity work only if the payment is correct. Executes the IsRightCaller procedure to verify that the call comes from the user (contract owner address). Performs the IsRightSignature procedure to verify that the signature got produced with the did_update_keys by applying the Schnorr signature algorithm. For this verification, the DID contract utilizes the public key that it has stored in the did_update_key mutable field. Executes the UpdateDocument procedure to update the verification_methods and services map fields. Applies the IsValidKey procedure to verify that the new public did_update_key is different from any other key. If so, then saves the new key in the did_update_key mutable field. Sets the DID Status to Updated . Emits a \"DID_updated\" event & executes the Timestamp procedure. A DID Update tyronzil transaction consumes approximately 700 units of GAS (1.4 ZIL).","title":"On the DID smart contract's side"},{"location":"implementation/models/","text":"Models The tyronzil DID Method extends the implementation of the following data structures from the Sidetree protocol : Public key model interface PublicKeyModel { id: string; key?: string; } The ID MUST be unique and correspond to one of the Public Key Purposes. Verification method model It extends the public key model: interface VerificationMethodModel { id: string; type: string; publicKeyBase58: string; } The type defaults to \"SchnorrSecp256k1VerificationKey2019\". Public key purpose It corresponds to the Verification Relationship for a public key aka verification method. enum PublicKeyPurpose { General = 'general', Auth = 'auth', Agreement = 'agreement', Assertion = 'assertion', Delegation = 'delegation', Invocation = 'invocation', XSGD = 'xsgd' } DID Service endpoint model interface DidServiceEndpointModel { id: string; type: string; endpoint: string; } Patch model interface PatchModel { action: PatchAction; ids?: string[]; //the IDs of the DID Document elements to remove keyInput?: PublicKeyInput[]; services?: TransitionValue[]; } Patch action enum PatchAction { AddKeys = 'add-public-keys', RemoveKeys = 'remove-public-keys', AddServices = 'add-service-endpoints', RemoveServices = 'remove-service-endpoints', CustomAction = '-custom-action', }","title":"Models"},{"location":"implementation/models/#models","text":"The tyronzil DID Method extends the implementation of the following data structures from the Sidetree protocol :","title":"Models"},{"location":"implementation/models/#public-key-model","text":"interface PublicKeyModel { id: string; key?: string; } The ID MUST be unique and correspond to one of the Public Key Purposes.","title":"Public key model"},{"location":"implementation/models/#verification-method-model","text":"It extends the public key model: interface VerificationMethodModel { id: string; type: string; publicKeyBase58: string; } The type defaults to \"SchnorrSecp256k1VerificationKey2019\".","title":"Verification method model"},{"location":"implementation/models/#public-key-purpose","text":"It corresponds to the Verification Relationship for a public key aka verification method. enum PublicKeyPurpose { General = 'general', Auth = 'auth', Agreement = 'agreement', Assertion = 'assertion', Delegation = 'delegation', Invocation = 'invocation', XSGD = 'xsgd' }","title":"Public key purpose"},{"location":"implementation/models/#did-service-endpoint-model","text":"interface DidServiceEndpointModel { id: string; type: string; endpoint: string; }","title":"DID Service endpoint model"},{"location":"implementation/models/#patch-model","text":"interface PatchModel { action: PatchAction; ids?: string[]; //the IDs of the DID Document elements to remove keyInput?: PublicKeyInput[]; services?: TransitionValue[]; }","title":"Patch model"},{"location":"implementation/models/#patch-action","text":"enum PatchAction { AddKeys = 'add-public-keys', RemoveKeys = 'remove-public-keys', AddServices = 'add-service-endpoints', RemoveServices = 'remove-service-endpoints', CustomAction = '-custom-action', }","title":"Patch action"},{"location":"scheme/did-scheme/","text":"Tyron's W3C DID Scheme A DID Scheme is the formal syntax of a Decentralized Identifier. It is a URI scheme conformant with RFC3986, Uniform Resource Identifier (URI): Generic Syntax . The following is the ABNF definition using the syntax in RFC5234, \"Augmented BNF for Syntax Specifications: ABNF\" : Generic rule names not defined there, are defined in RFC3986 . did = \"did:\" method-name \":\" method-specific-id method-name = 1*method-char method-char = %x61-7A / DIGIT method-specific-id = *( *idchar \":\" ) 1*idchar idchar = HEXDIG HEXDIG = DIGIT / \"a\" / \"b\" / \"c\" / \"d\" / \"e\" / \"f\" DIGIT = %x30-39 Both the scheme identifier (did) and the method name MUST be an ASCII lowercase string . This DID Method defines its method-name as \"tyron\" and the method-specific-id syntax as hierarchically partitioned: method-name = \"tyron\" method-specific-id = blockchain-namespace \":\" network-namespace \":\" did-suffix blockchain-namespace = \"zil:\" network-namespace = \"main:\" / \"test:\" did-suffix = 1*idchar Example of a Tyron Decentralized Identifier : did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9 DID Suffix The DID Suffix MUST be globally unique. A Tyron DID Suffix is the Zilliqa hex-encoded address of the corresponding DID smart contract. Every Zilliqa address is unique. As explained in Zilliqa's white-paper , the \"address for a contract account is computed from the address of its creator and how many transactions the creator account has sent, aka account nonce\": contract_address = LSB160(SHA3-256(address||nonce)) where: LSB160() returns the rightmost 160 bits of the input; SHA3-256() is the SHA-3 hash function that produces 256-bit digests; address is the address of the creator account; and nonce is the creator\u2019s nonce value. Implementation The Tyron DID Scheme gets implemented by the DidScheme procedure of the DID smart contract that generates the Decentralized Identifier and its Tyron Hash . On testnet: procedure DidScheme() this_did = let did_prefix = \"did:tyron:zil:test:\" in let did_suffix = builtin to_string _this_address in builtin concat did_prefix did_suffix; decentralized_identifier := this_did; this_th = let hash = builtin sha256hash this_did in builtin to_bystr hash; th = Some{ByStr} this_th; tyron_hash := th end Normalization The DID Scheme name (did) MUST be lowercase. The DID Method name (tyron) MUST be lowercase. Tyron's specific-id MUST follow the rules stated above. Persistence A Tyron DID is bound exclusively and permanently to a single subject , known as the contract_owner , even after deactivation.","title":"DID Scheme"},{"location":"scheme/did-scheme/#tyrons-w3c-did-scheme","text":"A DID Scheme is the formal syntax of a Decentralized Identifier. It is a URI scheme conformant with RFC3986, Uniform Resource Identifier (URI): Generic Syntax . The following is the ABNF definition using the syntax in RFC5234, \"Augmented BNF for Syntax Specifications: ABNF\" : Generic rule names not defined there, are defined in RFC3986 . did = \"did:\" method-name \":\" method-specific-id method-name = 1*method-char method-char = %x61-7A / DIGIT method-specific-id = *( *idchar \":\" ) 1*idchar idchar = HEXDIG HEXDIG = DIGIT / \"a\" / \"b\" / \"c\" / \"d\" / \"e\" / \"f\" DIGIT = %x30-39 Both the scheme identifier (did) and the method name MUST be an ASCII lowercase string . This DID Method defines its method-name as \"tyron\" and the method-specific-id syntax as hierarchically partitioned: method-name = \"tyron\" method-specific-id = blockchain-namespace \":\" network-namespace \":\" did-suffix blockchain-namespace = \"zil:\" network-namespace = \"main:\" / \"test:\" did-suffix = 1*idchar Example of a Tyron Decentralized Identifier : did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9","title":"Tyron's W3C DID Scheme"},{"location":"scheme/did-scheme/#did-suffix","text":"The DID Suffix MUST be globally unique. A Tyron DID Suffix is the Zilliqa hex-encoded address of the corresponding DID smart contract. Every Zilliqa address is unique. As explained in Zilliqa's white-paper , the \"address for a contract account is computed from the address of its creator and how many transactions the creator account has sent, aka account nonce\": contract_address = LSB160(SHA3-256(address||nonce)) where: LSB160() returns the rightmost 160 bits of the input; SHA3-256() is the SHA-3 hash function that produces 256-bit digests; address is the address of the creator account; and nonce is the creator\u2019s nonce value.","title":"DID Suffix"},{"location":"scheme/did-scheme/#implementation","text":"The Tyron DID Scheme gets implemented by the DidScheme procedure of the DID smart contract that generates the Decentralized Identifier and its Tyron Hash . On testnet: procedure DidScheme() this_did = let did_prefix = \"did:tyron:zil:test:\" in let did_suffix = builtin to_string _this_address in builtin concat did_prefix did_suffix; decentralized_identifier := this_did; this_th = let hash = builtin sha256hash this_did in builtin to_bystr hash; th = Some{ByStr} this_th; tyron_hash := th end","title":"Implementation"},{"location":"scheme/did-scheme/#normalization","text":"The DID Scheme name (did) MUST be lowercase. The DID Method name (tyron) MUST be lowercase. Tyron's specific-id MUST follow the rules stated above.","title":"Normalization"},{"location":"scheme/did-scheme/#persistence","text":"A Tyron DID is bound exclusively and permanently to a single subject , known as the contract_owner , even after deactivation.","title":"Persistence"},{"location":"scheme/did-url-syntax/","text":"DID-URL syntax The following is the ABNF definition using the syntax in RFC5324 : The path-abempty and fragment components are identical to the ABNF rules defined in RFC3986 The did-query component is derived from the query ABNF rule did-url = did path-abempty [ \"?\" did-query ] [ \"#\" fragment ] did-query = param *( \"&\" param ) param = param-name \"=\" param-value param-name = 1*pchar param-value = *pchar Path To be used to address resources available through a service endpoint. It MUST conform to the path-abempty ABFN rule in RFC3986 . Query The W3C did-query component derives from the query ABFN rule. It MUST be used with DID parameters as follows. DID-URL parameters These parameters are part of the query component of the DID-URL to specify what resource is requested. W3C DID parameter-names: hl : A resource hash of the DID Document to add integrity protection. service : Identifies a service from the DID Document by service ID. did:tyron:zil:test:EiAT_GxAt7gBozHlw2B1i7mfQaaORL3NOfFQr9FUt7jp6g?service=agentId1 version-id : Identifies a specific version of the DID Document to be resolved. version-time : Identifies a specific version timestamp of the DID Document to be resolved (the doc that was valid at that particular time). did:tyron:zil:test:EiAT_GxAt7gBozHlw2B1i7mfQaaORL3NOfFQr9FUt7jp6g?version-time=2020-09-07T17:00:00Z Additional parameters MUST be prefixed by the method name 'tyron', e.g.: 'tyron-dns'. Method-specific parameter names MAY be used by other DID methods, and they MAY be combined with generic parameter names in any order. Method-specific parameter namespaces MAY include colons to be partitioned hierarchically. Find the Tyron DID-URL implementation here on GitHub. Fragment A W3C DID fragment is used as a method-independent reference into the DID Document to identify a component of the document by ID, e.g. a specific public key or service endpoint. It MUST conform to the generic URI fragment syntax in RFC3986 .","title":"DID-URL syntax"},{"location":"scheme/did-url-syntax/#did-url-syntax","text":"The following is the ABNF definition using the syntax in RFC5324 : The path-abempty and fragment components are identical to the ABNF rules defined in RFC3986 The did-query component is derived from the query ABNF rule did-url = did path-abempty [ \"?\" did-query ] [ \"#\" fragment ] did-query = param *( \"&\" param ) param = param-name \"=\" param-value param-name = 1*pchar param-value = *pchar","title":"DID-URL syntax"},{"location":"scheme/did-url-syntax/#path","text":"To be used to address resources available through a service endpoint. It MUST conform to the path-abempty ABFN rule in RFC3986 .","title":"Path"},{"location":"scheme/did-url-syntax/#query","text":"The W3C did-query component derives from the query ABFN rule. It MUST be used with DID parameters as follows.","title":"Query"},{"location":"scheme/did-url-syntax/#did-url-parameters","text":"These parameters are part of the query component of the DID-URL to specify what resource is requested. W3C DID parameter-names: hl : A resource hash of the DID Document to add integrity protection. service : Identifies a service from the DID Document by service ID. did:tyron:zil:test:EiAT_GxAt7gBozHlw2B1i7mfQaaORL3NOfFQr9FUt7jp6g?service=agentId1 version-id : Identifies a specific version of the DID Document to be resolved. version-time : Identifies a specific version timestamp of the DID Document to be resolved (the doc that was valid at that particular time). did:tyron:zil:test:EiAT_GxAt7gBozHlw2B1i7mfQaaORL3NOfFQr9FUt7jp6g?version-time=2020-09-07T17:00:00Z Additional parameters MUST be prefixed by the method name 'tyron', e.g.: 'tyron-dns'. Method-specific parameter names MAY be used by other DID methods, and they MAY be combined with generic parameter names in any order. Method-specific parameter namespaces MAY include colons to be partitioned hierarchically. Find the Tyron DID-URL implementation here on GitHub.","title":"DID-URL parameters"},{"location":"scheme/did-url-syntax/#fragment","text":"A W3C DID fragment is used as a method-independent reference into the DID Document to identify a component of the document by ID, e.g. a specific public key or service endpoint. It MUST conform to the generic URI fragment syntax in RFC3986 .","title":"Fragment"}]}