{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"tyronZIL's DID-Method specification v1.0 A W3C DID-Method powered by Zilliqa Developed by Julio Cabrapan Duarte Funded by ZILHive Problem summary Identities on the internet remain centralized, mainly by identity providers such as Facebook, Google and PayPal. Thus, when people shop online and login with these accounts, they don't have enough control nor understanding of how their data is used and shared with third parties. Furthermore, decentralized applications are still difficult to grasp for most regular users, and Decentralized Identifiers(DIDs) can make the user experience much better while increasing privacy and security. Self-Sovereign Identity (SSI) allows people to manage their digital identities, proving who they are without a middleman, by anchoring DIDs on blockchain platforms as a shared root of trust. However, most blockchains still can't provide decentralized identity at scale. By implementing the Tyron SSI Protocol, tyronZIL aims to solve this issue and enable user-controlled digital identities. The purpose of Tyron To give people sovereignty over their data. The word Tyron derives from the Greek turannos that means sovereign, and Tyron's purpose is to give people sovereignty over their data. Conformance The tyronZIL DID-Method is conformant with the World Wide Web Consortium (W3C) Decentralized Identifiers (DIDs) v1.0 specification and the first DID-Method for the Zilliqa blockchain platform registered in the DID Specification Registries . Intro to W3C DIDs DID-Method The tyronZIL DID-Method is part of the open-source Tyron SSI Protocol that defines its: Scheme: DID-Scheme DID-URL syntax DID-Document CRUD operations: DID-Create DID-Resolve DID-Recover DID-Update DID-Deactivate Security & privacy considerations Protocol The Tyron Self-Sovereign Identity Protocol, based on smart-contract technology to solve the issue of DID scalability, describes the DID-Method and the cryptographic information to instantiate, deploy and manage the DID-Smart-Contract that has the user as its owner. As an SSI protocol, it is non-custodial - the user is in control of their Decentralized Identifier. Protocol default parameters Smart contracts (SCs): Decentralized Identifier SC init.tyron SC Smart contracts on Zilliqa get written in Scilla (Smart Contract Intermediate-Level Language) that has a design with a focus on safety, imposing a language structure that makes applications less vulnerable to attacks by eliminating known vulnerabilities directly at the language-level. Scilla provides formal verification with embedding into the Coq proof assistant . Implementation DID-Client: tyronZIL-js is the open-source reference implementation for Node.js, written in TypeScript Models Development Roadmap","title":"Home"},{"location":"#tyronzils-did-method-specification-v10","text":"A W3C DID-Method powered by Zilliqa Developed by Julio Cabrapan Duarte Funded by ZILHive","title":"tyronZIL's DID-Method specification v1.0"},{"location":"#problem-summary","text":"Identities on the internet remain centralized, mainly by identity providers such as Facebook, Google and PayPal. Thus, when people shop online and login with these accounts, they don't have enough control nor understanding of how their data is used and shared with third parties. Furthermore, decentralized applications are still difficult to grasp for most regular users, and Decentralized Identifiers(DIDs) can make the user experience much better while increasing privacy and security. Self-Sovereign Identity (SSI) allows people to manage their digital identities, proving who they are without a middleman, by anchoring DIDs on blockchain platforms as a shared root of trust. However, most blockchains still can't provide decentralized identity at scale. By implementing the Tyron SSI Protocol, tyronZIL aims to solve this issue and enable user-controlled digital identities.","title":"Problem summary"},{"location":"#the-purpose-of-tyron","text":"To give people sovereignty over their data. The word Tyron derives from the Greek turannos that means sovereign, and Tyron's purpose is to give people sovereignty over their data.","title":"The purpose of Tyron"},{"location":"#conformance","text":"The tyronZIL DID-Method is conformant with the World Wide Web Consortium (W3C) Decentralized Identifiers (DIDs) v1.0 specification and the first DID-Method for the Zilliqa blockchain platform registered in the DID Specification Registries . Intro to W3C DIDs","title":"Conformance"},{"location":"#did-method","text":"The tyronZIL DID-Method is part of the open-source Tyron SSI Protocol that defines its: Scheme: DID-Scheme DID-URL syntax DID-Document CRUD operations: DID-Create DID-Resolve DID-Recover DID-Update DID-Deactivate Security & privacy considerations","title":"DID-Method"},{"location":"#protocol","text":"The Tyron Self-Sovereign Identity Protocol, based on smart-contract technology to solve the issue of DID scalability, describes the DID-Method and the cryptographic information to instantiate, deploy and manage the DID-Smart-Contract that has the user as its owner. As an SSI protocol, it is non-custodial - the user is in control of their Decentralized Identifier. Protocol default parameters Smart contracts (SCs): Decentralized Identifier SC init.tyron SC Smart contracts on Zilliqa get written in Scilla (Smart Contract Intermediate-Level Language) that has a design with a focus on safety, imposing a language structure that makes applications less vulnerable to attacks by eliminating known vulnerabilities directly at the language-level. Scilla provides formal verification with embedding into the Coq proof assistant .","title":"Protocol"},{"location":"#implementation","text":"DID-Client: tyronZIL-js is the open-source reference implementation for Node.js, written in TypeScript Models","title":"Implementation"},{"location":"#development","text":"Roadmap","title":"Development"},{"location":"W3C-dids/","text":"W3C Decentralized Identifiers The tyronZIL DID-Method refers to the following terms specified in W3C Decentralized Identifiers (DIDs) v1.0 : DID-Method A DID-Method is a specification for the precise scheme of a DID, and it also specifies the methods creating, resolving, updating and deactivating such a DID and its DID-Document, using a specific type of verifiable data registry, in tyronZIL's case, Zilliqa. Decentralized Identifier (DID) A DID is a globally unique Uniform Resource Identifier (URI) that associates a DID-Subject with a DID-Document. Given the decentralized nature of Zilliqa, a tyronZIL DID has its existence guaranteed without depending on a central authority. A DID consists of three parts: The scheme identifier: \"did\" The DID-Method identifier The DID-Method-specific identifier, which must be unique The Tyron DID-Scheme DID-URL A DID-URL identifies a particular resource to be located, e.g. a specific part of the DID-Document. It extends the syntax of a basic DID to incorporate other standard URI components: Path: The portion of a DID-URL that begins with and includes the first forward slash character, \"/\" Query: The portion of a DID-URL that follows the first question mark character, \"?\" Fragment: The portion of a DID-URL that follows the first hash sign character \"#\" DID-Subject The DID-Subject is the entity identified by the DID and described by the DID-Document - the user of the Decentralized Identifier. DID-Controller The DID-Controller is the entity that has the capability - as defined by the DID-Method - to make changes to a DID-Document. DID-Document A DID is resolvable to a DID-Document, which contains data associated with the DID, such as cryptographic material, verification methods and service endpoints relevant to interactions with the DID-Subject. The DID itself is the value of the id property. The Tyron DID-Document . Verification method A verification method is a set of parameters used to independently verify a proof according to the particular DID-Method, e.g. a public key. Verification relationship It expresses the relationship between the DID-Subject and a verification method, e.g. authentication. All verification methods must be associated with a particular verification relationship. Producer A producer is any algorithm realized as software/hardware that conforms to the W3C DIDs specification by generating conforming DIDs or conforming DID-Documents. A producer that is conformant with the specification MUST NOT produce non-conforming DIDs or DID-Documents. Producers MUST indicate which representation of a document corresponds via a 'contentType' in the document's resolution-metadata. Consumer A consumer is any algorithm realized as software/hardware that conforms to the W3C DIDs specification by consuming conforming DIDs or conforming DID-Documents. A consumer that is conformant with the specification MUST produce errors when consuming non-conforming DIDs or DID-Documents. Consumers MUST determine which is the representation of the DID-Document via the 'contentType' DID resolver metadata field.","title":"W3C DIDs"},{"location":"W3C-dids/#w3c-decentralized-identifiers","text":"The tyronZIL DID-Method refers to the following terms specified in W3C Decentralized Identifiers (DIDs) v1.0 :","title":"W3C Decentralized Identifiers"},{"location":"W3C-dids/#did-method","text":"A DID-Method is a specification for the precise scheme of a DID, and it also specifies the methods creating, resolving, updating and deactivating such a DID and its DID-Document, using a specific type of verifiable data registry, in tyronZIL's case, Zilliqa.","title":"DID-Method"},{"location":"W3C-dids/#decentralized-identifier-did","text":"A DID is a globally unique Uniform Resource Identifier (URI) that associates a DID-Subject with a DID-Document. Given the decentralized nature of Zilliqa, a tyronZIL DID has its existence guaranteed without depending on a central authority. A DID consists of three parts: The scheme identifier: \"did\" The DID-Method identifier The DID-Method-specific identifier, which must be unique The Tyron DID-Scheme","title":"Decentralized Identifier (DID)"},{"location":"W3C-dids/#did-url","text":"A DID-URL identifies a particular resource to be located, e.g. a specific part of the DID-Document. It extends the syntax of a basic DID to incorporate other standard URI components: Path: The portion of a DID-URL that begins with and includes the first forward slash character, \"/\" Query: The portion of a DID-URL that follows the first question mark character, \"?\" Fragment: The portion of a DID-URL that follows the first hash sign character \"#\"","title":"DID-URL"},{"location":"W3C-dids/#did-subject","text":"The DID-Subject is the entity identified by the DID and described by the DID-Document - the user of the Decentralized Identifier.","title":"DID-Subject"},{"location":"W3C-dids/#did-controller","text":"The DID-Controller is the entity that has the capability - as defined by the DID-Method - to make changes to a DID-Document.","title":"DID-Controller"},{"location":"W3C-dids/#did-document","text":"A DID is resolvable to a DID-Document, which contains data associated with the DID, such as cryptographic material, verification methods and service endpoints relevant to interactions with the DID-Subject. The DID itself is the value of the id property. The Tyron DID-Document .","title":"DID-Document"},{"location":"W3C-dids/#verification-method","text":"A verification method is a set of parameters used to independently verify a proof according to the particular DID-Method, e.g. a public key.","title":"Verification method"},{"location":"W3C-dids/#verification-relationship","text":"It expresses the relationship between the DID-Subject and a verification method, e.g. authentication. All verification methods must be associated with a particular verification relationship.","title":"Verification relationship"},{"location":"W3C-dids/#producer","text":"A producer is any algorithm realized as software/hardware that conforms to the W3C DIDs specification by generating conforming DIDs or conforming DID-Documents. A producer that is conformant with the specification MUST NOT produce non-conforming DIDs or DID-Documents. Producers MUST indicate which representation of a document corresponds via a 'contentType' in the document's resolution-metadata.","title":"Producer"},{"location":"W3C-dids/#consumer","text":"A consumer is any algorithm realized as software/hardware that conforms to the W3C DIDs specification by consuming conforming DIDs or conforming DID-Documents. A consumer that is conformant with the specification MUST produce errors when consuming non-conforming DIDs or DID-Documents. Consumers MUST determine which is the representation of the DID-Document via the 'contentType' DID resolver metadata field.","title":"Consumer"},{"location":"did-document/","text":"Tyron DID-Document For an introduction, read this . A DID-Document is a graph-based data structure, a collection of property-value pairs, serialized according to a particular syntax. The Tyron DID-Document's serialization format is JSON : It defines an unambiguous encoding and decoding of all properties and their associated values It MUST be a single JSON object conforming to RFC8259, The JavaScript Object Notation (JSON) Data Interchange Format The names of the members of the JSON object MUST correspond to the core property names of the DID-Document Property values MUST be: - Numbers for number values representable as IEEE754 - Literal values for boolean ('false', 'true') and empty values ('null') - Arrays for sequence values and unordered sets of values - Objects for sets of properties - Strings for all other values. Consumers MAY further parse these strings into more specific data types such as URIs and date stamps The contentType property in the resolver's metadata MUST be application/did+json : - Which is the associated IANA-registered MIME type, with its corresponding rules to process the fragment - Producers MUST write this type in the document's metadata, and consumers MUST validate it as well Consumers MUST ignore unknown object member names as unknown properties Core properties 1. id The id value MUST be a single valid Tyron DID itself, e.g.: { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9\" } All W3C DID-Documents MUST include the id property, which denotes the DID-Subject . 2. publicKey The publicKey property is the main verification method . The publicKey value MUST be an array of objects of type VerificationMethodModel , e.g.: { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9\", \"publicKey\": [ { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#keyID-1\", \"type\": \"SchnorrSecp256k1VerificationKey2019\", \"publicKeyBase58\": \"sPKxpZouU4wtdYsTN6a9nJtkfEYPPebSGVsz9ZWJPU3N\" }, { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#keyID-2\", \"type\": \"SchnorrSecp256k1VerificationKey2019\", \"publicKeyBase58\": \"tfJRkK8kEu8YFML8bwpkZwzo8YXDFhfFuryfGQAtw4jg\" } ] } All verification methods MUST have the following properties: id : Its value MUST be a unique Tyron DID-URL. There MUST NOT be multiple verification method objects with the same id-value - otherwise the consumer MUST produce an error type : Its value MUST be exactly one verification method type. The Tyron default type is currently SchnorrSecp256k1VerificationKey2019 publicKeyBase58 : the secp256k1 public key value encoded as a raw 32-byte string in Base58 Bitcoin format Before processing them into the DID-Document, each verification method has a property called purpose . It states the functionality of the key, its verification relationship . For public keys, the purpose value MUST be an array of PublicKeyPurpose variants . 3. authentication When the key purpose is PublicKeyPurpose.Auth = 'auth' . The authentication value MUST be an array of verification methods. Each verification method MAY be embedded or referenced, e.g.: { \"authentication\": [ // referenced key: \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#generalKeyID\", // embedded key: { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#onlyAuthKey\", \"type\": \"SchnorrSecp256k1VerificationKey2019\", \"publicKeyBase58\": \"jcJRkK8kEu8YFML8bwpkZwzo8YXDFhfFuryfGQAtw4cd\" } ] } 4. service Tyron service endpoints allow communication with the DID subject , from privacy-preserving messaging services to cryptocurrency addresses. The service value MUST be an array of objects of type DidServiceEndpointModel , e.g.: { \"service\": [ { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#did-method\", \"type\": \"website\", \"endpoint\": \"https://tyronZIL.com\" }, { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#account-X\", \"type\": \"zil-address\", \"endpoint\": \"zil1egvj6ketfydy48uqzu8qphhj5w4xrkratv85ht\" } ] } All services MUST have the following properties: id : Its value MUST be a unique Tyron DID-URL with a length no more than fifty (50) ASCII encoded characters. There MUST NOT be multiple keys with the same id-value - otherwise the consumer MUST produce an error type : Its value MUST be a string with a length of no more than thirty (30) ASCII encoded characters endpoint : Its value MUST be a valid URI string (including a scheme segment, i.e. 'https://', 'git://'), with a length of no more than one hundred (100) ASCII encoded characters OR a Zilliqa address If any of the values exceed the specified lengths, the consumer MUST produce an error.","title":"DID-Document"},{"location":"did-document/#tyron-did-document","text":"For an introduction, read this . A DID-Document is a graph-based data structure, a collection of property-value pairs, serialized according to a particular syntax. The Tyron DID-Document's serialization format is JSON : It defines an unambiguous encoding and decoding of all properties and their associated values It MUST be a single JSON object conforming to RFC8259, The JavaScript Object Notation (JSON) Data Interchange Format The names of the members of the JSON object MUST correspond to the core property names of the DID-Document Property values MUST be: - Numbers for number values representable as IEEE754 - Literal values for boolean ('false', 'true') and empty values ('null') - Arrays for sequence values and unordered sets of values - Objects for sets of properties - Strings for all other values. Consumers MAY further parse these strings into more specific data types such as URIs and date stamps The contentType property in the resolver's metadata MUST be application/did+json : - Which is the associated IANA-registered MIME type, with its corresponding rules to process the fragment - Producers MUST write this type in the document's metadata, and consumers MUST validate it as well Consumers MUST ignore unknown object member names as unknown properties","title":"Tyron DID-Document"},{"location":"did-document/#core-properties","text":"","title":"Core properties"},{"location":"did-document/#1-id","text":"The id value MUST be a single valid Tyron DID itself, e.g.: { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9\" } All W3C DID-Documents MUST include the id property, which denotes the DID-Subject .","title":"1. id"},{"location":"did-document/#2-publickey","text":"The publicKey property is the main verification method . The publicKey value MUST be an array of objects of type VerificationMethodModel , e.g.: { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9\", \"publicKey\": [ { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#keyID-1\", \"type\": \"SchnorrSecp256k1VerificationKey2019\", \"publicKeyBase58\": \"sPKxpZouU4wtdYsTN6a9nJtkfEYPPebSGVsz9ZWJPU3N\" }, { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#keyID-2\", \"type\": \"SchnorrSecp256k1VerificationKey2019\", \"publicKeyBase58\": \"tfJRkK8kEu8YFML8bwpkZwzo8YXDFhfFuryfGQAtw4jg\" } ] } All verification methods MUST have the following properties: id : Its value MUST be a unique Tyron DID-URL. There MUST NOT be multiple verification method objects with the same id-value - otherwise the consumer MUST produce an error type : Its value MUST be exactly one verification method type. The Tyron default type is currently SchnorrSecp256k1VerificationKey2019 publicKeyBase58 : the secp256k1 public key value encoded as a raw 32-byte string in Base58 Bitcoin format Before processing them into the DID-Document, each verification method has a property called purpose . It states the functionality of the key, its verification relationship . For public keys, the purpose value MUST be an array of PublicKeyPurpose variants .","title":"2. publicKey"},{"location":"did-document/#3-authentication","text":"When the key purpose is PublicKeyPurpose.Auth = 'auth' . The authentication value MUST be an array of verification methods. Each verification method MAY be embedded or referenced, e.g.: { \"authentication\": [ // referenced key: \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#generalKeyID\", // embedded key: { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#onlyAuthKey\", \"type\": \"SchnorrSecp256k1VerificationKey2019\", \"publicKeyBase58\": \"jcJRkK8kEu8YFML8bwpkZwzo8YXDFhfFuryfGQAtw4cd\" } ] }","title":"3. authentication"},{"location":"did-document/#4-service","text":"Tyron service endpoints allow communication with the DID subject , from privacy-preserving messaging services to cryptocurrency addresses. The service value MUST be an array of objects of type DidServiceEndpointModel , e.g.: { \"service\": [ { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#did-method\", \"type\": \"website\", \"endpoint\": \"https://tyronZIL.com\" }, { \"id\": \"did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9#account-X\", \"type\": \"zil-address\", \"endpoint\": \"zil1egvj6ketfydy48uqzu8qphhj5w4xrkratv85ht\" } ] } All services MUST have the following properties: id : Its value MUST be a unique Tyron DID-URL with a length no more than fifty (50) ASCII encoded characters. There MUST NOT be multiple keys with the same id-value - otherwise the consumer MUST produce an error type : Its value MUST be a string with a length of no more than thirty (30) ASCII encoded characters endpoint : Its value MUST be a valid URI string (including a scheme segment, i.e. 'https://', 'git://'), with a length of no more than one hundred (100) ASCII encoded characters OR a Zilliqa address If any of the values exceed the specified lengths, the consumer MUST produce an error.","title":"4. service"},{"location":"protocol-parameters/","text":"Protocol parameters DID-Keys The Tyron DID Protocol defines 3 pairs of DID-Keys generated by the KEY_ALGORITHM : did_contract_owner : The user's Zilliqa account is the sole owner of their DID-SC, and the subject and controller of their Dececentralized Identifier. The contract_owner is the hex-encoded address corresponding to this key. did_update_keys : To execute a DID-Update operation, the updated DID-Document must get signed by these keys, and the DID-SC makes sure of it with the IsRightSignature procedure. did_recovery_keys : Idem update key, but necessary for the DID-Recover & DID-Deactivate operations. The update & recovery keys MUST only get utilized once, which the DID-SC verifies with the IsValidKey procedure. The corresponding private keys MUST always be in control of their user. Tyron Hash Empowered by Scilla, the DID-Smart-Contract produces the Tyron Hash by applying the HASH_ALGORITHM on the Decentralized Identifier. The Tyron Hash must be signed to deactivate the DID. The Tyron DID Protocol implements several parameters defined by the Sidetree Protocol (a layer-2 solution on top of the Bitcoin network). Transaction number The transaction number is a monotonically increasing number. Its order is deterministic and assigned to every transaction according to its position in the ledger time. Every Tyron DID has a corresponding DID-Smart-Contract that keeps track of the DID-State and assigns a transaction number to every consecutive transaction modifying the DID-State. Ledger time The ledger time is the blockchain clock variable, used as a deterministic chronological reference. DID-Suffix A DID-Suffix is the unique identifier string in a Decentralized Identifier, the last part of the DID after the final colon. Hash algorithm The HASH_ALGORITH is the algorithm to generate hashes of protocol-related values. The default parameter is SHA256. Data encoding scheme The DATA_ENCODING_SCHEME is the encoding for various data structures such as JSON and strings, which MUST have its output in ASCII format. The default parameter is hex (hexadecimal, base16). Key algorithm The KEY_ALGORITHM is the asymmetric public key algorithm. The default parameter is secp256k1. Operation key pair Generates a cryptographic key pair to operate with, using the KEY_ALGORITHM. It returns the public key as a PublicKeyModel and the private key as a hex-encoded secp256k1 key. Signature algorithm The SIGNATURE_ALGORITHM is the asymmetric public key signature algorithm. The default parameter is Schnorr. The DID-Smart-Contract can verify that all Schnorr signatures correspond to the DID-Keys defined above, by executing the IsRightSignature procedure. DID-State patch A DID-State patch is the Sidetree format to describe the mutations of the DID's metadata state. Its data structure corresponds with the Patch model , which MUST include a Patch action and the document to be patched.","title":"Protocol parameters"},{"location":"protocol-parameters/#protocol-parameters","text":"","title":"Protocol parameters"},{"location":"protocol-parameters/#did-keys","text":"The Tyron DID Protocol defines 3 pairs of DID-Keys generated by the KEY_ALGORITHM : did_contract_owner : The user's Zilliqa account is the sole owner of their DID-SC, and the subject and controller of their Dececentralized Identifier. The contract_owner is the hex-encoded address corresponding to this key. did_update_keys : To execute a DID-Update operation, the updated DID-Document must get signed by these keys, and the DID-SC makes sure of it with the IsRightSignature procedure. did_recovery_keys : Idem update key, but necessary for the DID-Recover & DID-Deactivate operations. The update & recovery keys MUST only get utilized once, which the DID-SC verifies with the IsValidKey procedure. The corresponding private keys MUST always be in control of their user.","title":"DID-Keys"},{"location":"protocol-parameters/#tyron-hash","text":"Empowered by Scilla, the DID-Smart-Contract produces the Tyron Hash by applying the HASH_ALGORITHM on the Decentralized Identifier. The Tyron Hash must be signed to deactivate the DID. The Tyron DID Protocol implements several parameters defined by the Sidetree Protocol (a layer-2 solution on top of the Bitcoin network).","title":"Tyron Hash"},{"location":"protocol-parameters/#transaction-number","text":"The transaction number is a monotonically increasing number. Its order is deterministic and assigned to every transaction according to its position in the ledger time. Every Tyron DID has a corresponding DID-Smart-Contract that keeps track of the DID-State and assigns a transaction number to every consecutive transaction modifying the DID-State.","title":"Transaction number"},{"location":"protocol-parameters/#ledger-time","text":"The ledger time is the blockchain clock variable, used as a deterministic chronological reference.","title":"Ledger time"},{"location":"protocol-parameters/#did-suffix","text":"A DID-Suffix is the unique identifier string in a Decentralized Identifier, the last part of the DID after the final colon.","title":"DID-Suffix"},{"location":"protocol-parameters/#hash-algorithm","text":"The HASH_ALGORITH is the algorithm to generate hashes of protocol-related values. The default parameter is SHA256.","title":"Hash algorithm"},{"location":"protocol-parameters/#data-encoding-scheme","text":"The DATA_ENCODING_SCHEME is the encoding for various data structures such as JSON and strings, which MUST have its output in ASCII format. The default parameter is hex (hexadecimal, base16).","title":"Data encoding scheme"},{"location":"protocol-parameters/#key-algorithm","text":"The KEY_ALGORITHM is the asymmetric public key algorithm. The default parameter is secp256k1.","title":"Key algorithm"},{"location":"protocol-parameters/#operation-key-pair","text":"Generates a cryptographic key pair to operate with, using the KEY_ALGORITHM. It returns the public key as a PublicKeyModel and the private key as a hex-encoded secp256k1 key.","title":"Operation key pair"},{"location":"protocol-parameters/#signature-algorithm","text":"The SIGNATURE_ALGORITHM is the asymmetric public key signature algorithm. The default parameter is Schnorr. The DID-Smart-Contract can verify that all Schnorr signatures correspond to the DID-Keys defined above, by executing the IsRightSignature procedure.","title":"Signature algorithm"},{"location":"protocol-parameters/#did-state-patch","text":"A DID-State patch is the Sidetree format to describe the mutations of the DID's metadata state. Its data structure corresponds with the Patch model , which MUST include a Patch action and the document to be patched.","title":"DID-State patch"},{"location":"roadmap/","text":"tyronZIL roadmap The tyronZIL project gets organized in development sprints of 4 weeks duration. Dates Sprint 29/6 - 24/7/2020 Create the tyronZIL DID-Client that performs DID CRUD operations (create, read, recover, update & deactivate) 27/7 - 21/8/2020 Integrate the DID-Client with the Zilliqa blockchain platform 24/8 - 18/9/2020 Implement the Tyron-Smart-Contract to immutably save and distribute DID-States 21/9 - 11/12/2020 Tyron Improvement Proposal #1 - TIP1 consists of 3 sprints - details will get published soon enough","title":"Development"},{"location":"roadmap/#tyronzil-roadmap","text":"The tyronZIL project gets organized in development sprints of 4 weeks duration. Dates Sprint 29/6 - 24/7/2020 Create the tyronZIL DID-Client that performs DID CRUD operations (create, read, recover, update & deactivate) 27/7 - 21/8/2020 Integrate the DID-Client with the Zilliqa blockchain platform 24/8 - 18/9/2020 Implement the Tyron-Smart-Contract to immutably save and distribute DID-States 21/9 - 11/12/2020 Tyron Improvement Proposal #1 - TIP1 consists of 3 sprints - details will get published soon enough","title":"tyronZIL roadmap"},{"location":"security-privacy/","text":"Security & privacy considerations TyronZIL DIDs operate on Zilliqa, a public blockchain platform that implements PBFT (practical byzantine fault tolerance) as the consensus protocol, as explained in the Zilliqa's whitepaper . Given the 'public' nature of the network, Tyron anticipates that messages could be read, or corrupted in case of chain-reorganization. However, as long as there is no 51% attack the ledger's immutability, on which DIDs rely on, remains uncompromised. The tyronZIL DID-Client currently interacts with Zilliqa nodes hosted by Zilliqa Research Pte. Ltd. as can be seen in the open-source code but is also possible to submit transactions to any other node. Interaction with the user's Tyron-Smart-Contract(TSM) happens through transactions that require an increasing nonce, mitigating this way replay attacks. The user can check their TSM-State on, e.g. Devex to confirm that their operation did not get delayed. Furthermore, timestamps are supported and coded into the TSM. Smart contract security Scilla implements smart contract safety at the language level with formal verification. It utilizes the Coq Proof Assistant for mechanized proofs about programs' properties. Key revocation, DID recovery & deactivation If a key is compromised, it is possible to remove it through a DID-Update operation with a 'RemoveKeys' patch-action. To perform a DID operation, the user MUST provide their cryptographic key matching the corresponding public-key commitment, ensuring that any insertion, deletion or modification happens under stipulated terms. If the update-key is compromised, the user can request a DID-Recover operation to replace their DID-State, completely. DID deactivation is also supported as long as the recovery-key is not compromised. Privacy Considerations The tyronZIL DID-Method focuses on principle #7 of Privacy by Design: \"Respect for user privacy \u2014 keep it user-centric\". As a consequence, the user as the DID-Subject is the sole DID-Controller of their Decentralized Identifier. Keep Personally-Identifiable Information (PII) private Given that Zilliqa is a public & decentralized network, personal data MUST NOT get included in the DID-Document , ensuring the user's right to be forgotten All personal information MUST exist behind service endpoints, under the user's control. The exchange of personal data MUST occur on private, peer-to-peer communication channels. Correlation risk The user MUST be aware that if using their tyronZIL DID with more than one party, then they are implicitly authorizing correlation between those parties. To mitigate this, a user can have as many Decentralized Identifiers as needed to engage in pairwise interactions. Either way, correlation can still occur if the same keys or personal service endpoints get used in different DID-Documents. Unique endpoints allow traffic to be easily correlated, so a better strategy is to share an endpoint among many DIDs. Tyron assumes uncompromised endpoints.","title":"Security & privacy"},{"location":"security-privacy/#security-privacy-considerations","text":"TyronZIL DIDs operate on Zilliqa, a public blockchain platform that implements PBFT (practical byzantine fault tolerance) as the consensus protocol, as explained in the Zilliqa's whitepaper . Given the 'public' nature of the network, Tyron anticipates that messages could be read, or corrupted in case of chain-reorganization. However, as long as there is no 51% attack the ledger's immutability, on which DIDs rely on, remains uncompromised. The tyronZIL DID-Client currently interacts with Zilliqa nodes hosted by Zilliqa Research Pte. Ltd. as can be seen in the open-source code but is also possible to submit transactions to any other node. Interaction with the user's Tyron-Smart-Contract(TSM) happens through transactions that require an increasing nonce, mitigating this way replay attacks. The user can check their TSM-State on, e.g. Devex to confirm that their operation did not get delayed. Furthermore, timestamps are supported and coded into the TSM.","title":"Security &amp; privacy considerations"},{"location":"security-privacy/#smart-contract-security","text":"Scilla implements smart contract safety at the language level with formal verification. It utilizes the Coq Proof Assistant for mechanized proofs about programs' properties.","title":"Smart contract security"},{"location":"security-privacy/#key-revocation-did-recovery-deactivation","text":"If a key is compromised, it is possible to remove it through a DID-Update operation with a 'RemoveKeys' patch-action. To perform a DID operation, the user MUST provide their cryptographic key matching the corresponding public-key commitment, ensuring that any insertion, deletion or modification happens under stipulated terms. If the update-key is compromised, the user can request a DID-Recover operation to replace their DID-State, completely. DID deactivation is also supported as long as the recovery-key is not compromised.","title":"Key revocation, DID recovery &amp; deactivation"},{"location":"security-privacy/#privacy-considerations","text":"The tyronZIL DID-Method focuses on principle #7 of Privacy by Design: \"Respect for user privacy \u2014 keep it user-centric\". As a consequence, the user as the DID-Subject is the sole DID-Controller of their Decentralized Identifier.","title":"Privacy Considerations"},{"location":"security-privacy/#keep-personally-identifiable-information-pii-private","text":"Given that Zilliqa is a public & decentralized network, personal data MUST NOT get included in the DID-Document , ensuring the user's right to be forgotten All personal information MUST exist behind service endpoints, under the user's control. The exchange of personal data MUST occur on private, peer-to-peer communication channels.","title":"Keep Personally-Identifiable Information (PII) private"},{"location":"security-privacy/#correlation-risk","text":"The user MUST be aware that if using their tyronZIL DID with more than one party, then they are implicitly authorizing correlation between those parties. To mitigate this, a user can have as many Decentralized Identifiers as needed to engage in pairwise interactions. Either way, correlation can still occur if the same keys or personal service endpoints get used in different DID-Documents. Unique endpoints allow traffic to be easily correlated, so a better strategy is to share an endpoint among many DIDs. Tyron assumes uncompromised endpoints.","title":"Correlation risk"},{"location":"CRUD-operations/did-create/","text":"Tyron DID-Create operation A Tyron DID-Create operation generates a brand new Decentralized Identifier, its DID-Document and DID-State, and stores these data in a new DID-Smart-Contract (DID-SC) . On the client's side: Initialize with the Zilliqa network (mainnet or testnet), the user's address, the client's private key and the gas limit. Get the user's input regarding cryptographic keys and service endpoints for the DID. Verification methods: With the public key input generate an array of keys of type PublicKeyModel , generated using the operation key pair . Service endpoints: An array of endpoints of type DidServiceEndpointModel . With the verification methods and service endpoints, generate a document of type DocumentModel and hex-encode it. Sign the document with the did_contract_owner key-pair. Generate the DID-Keys using the KEY_ALGORITH : The update key-pair (necessary for the following Update operation) & the recovery key-pair (needed for any future Recovery or Deactivate operation). Return the document, Schnorr signature & public DID-Keys as hex-encoded strings. All private keys MUST be in control of the user. Download, decode (Base64) & decompress the DID-SC-template from the init.tyron smart-contract. Instantiate the DID-SC with the user's address as the contract_owner and deploy it on the Zilliqa blockchain platform. Call the ContractInit transition of the user's DID-SC. Produce the DidCreate transition parameters with the output from step 7. The client MUST submit the tyronZIL transaction by calling the DidCreate transition of the user's DID-SC. On the DID-Smart-Contract's side When the DidCreate transition gets called with the proper hex-encoded arguments (document of type ByStr, signature of type ByStr64 & DID-Keys of type ByStr33), the DID-SC proceeds as follows: First, it executes the Payment procedure to make the DID-SC work only if the payment is correct. Executes the IsClient procedure to verify that the call comes from the user's client. Executes the IsInitialized procedure to verify that the DID-Status is Initialized . Executes the DidScheme procedure, which generates the user's Decentralized Identifier according to the DID-Scheme with the DID-SC address as the DID-Suffix . This procedure also produces the tyron_hash by applying the HASH_ALGORITH to the DID. Executes the IsOwnerKey procedure to verify that the did_contract_owner public key matches the DID-SC's contract_owner address. Performs the IsRightSignature procedure to verify that the signature that comes with the signed document got done with the did_contract_owner key-pair by applying the Schnorr signature algorithm. If it's correct, then saves the hex-encoded-document in the did_document field. Applies the IsValidKey procedure to verify that all DID-Keys are unique, and then sets the fields did_update_key & did_recovery_key . Sets the DID-Status to Created and saves the blocknumber into the created field. Executes the Timestamp procedure. A tyronZIL DID-Create transaction (incl. the DID-SC deployment and initialization) consumes approximately 2,100 units of GAS (4.2 ZIL, currently less than 0.09 USD).","title":"DID-Create"},{"location":"CRUD-operations/did-create/#tyron-did-create-operation","text":"A Tyron DID-Create operation generates a brand new Decentralized Identifier, its DID-Document and DID-State, and stores these data in a new DID-Smart-Contract (DID-SC) .","title":"Tyron DID-Create operation"},{"location":"CRUD-operations/did-create/#on-the-clients-side","text":"Initialize with the Zilliqa network (mainnet or testnet), the user's address, the client's private key and the gas limit. Get the user's input regarding cryptographic keys and service endpoints for the DID. Verification methods: With the public key input generate an array of keys of type PublicKeyModel , generated using the operation key pair . Service endpoints: An array of endpoints of type DidServiceEndpointModel . With the verification methods and service endpoints, generate a document of type DocumentModel and hex-encode it. Sign the document with the did_contract_owner key-pair. Generate the DID-Keys using the KEY_ALGORITH : The update key-pair (necessary for the following Update operation) & the recovery key-pair (needed for any future Recovery or Deactivate operation). Return the document, Schnorr signature & public DID-Keys as hex-encoded strings. All private keys MUST be in control of the user. Download, decode (Base64) & decompress the DID-SC-template from the init.tyron smart-contract. Instantiate the DID-SC with the user's address as the contract_owner and deploy it on the Zilliqa blockchain platform. Call the ContractInit transition of the user's DID-SC. Produce the DidCreate transition parameters with the output from step 7. The client MUST submit the tyronZIL transaction by calling the DidCreate transition of the user's DID-SC.","title":"On the client's side:"},{"location":"CRUD-operations/did-create/#on-the-did-smart-contracts-side","text":"When the DidCreate transition gets called with the proper hex-encoded arguments (document of type ByStr, signature of type ByStr64 & DID-Keys of type ByStr33), the DID-SC proceeds as follows: First, it executes the Payment procedure to make the DID-SC work only if the payment is correct. Executes the IsClient procedure to verify that the call comes from the user's client. Executes the IsInitialized procedure to verify that the DID-Status is Initialized . Executes the DidScheme procedure, which generates the user's Decentralized Identifier according to the DID-Scheme with the DID-SC address as the DID-Suffix . This procedure also produces the tyron_hash by applying the HASH_ALGORITH to the DID. Executes the IsOwnerKey procedure to verify that the did_contract_owner public key matches the DID-SC's contract_owner address. Performs the IsRightSignature procedure to verify that the signature that comes with the signed document got done with the did_contract_owner key-pair by applying the Schnorr signature algorithm. If it's correct, then saves the hex-encoded-document in the did_document field. Applies the IsValidKey procedure to verify that all DID-Keys are unique, and then sets the fields did_update_key & did_recovery_key . Sets the DID-Status to Created and saves the blocknumber into the created field. Executes the Timestamp procedure. A tyronZIL DID-Create transaction (incl. the DID-SC deployment and initialization) consumes approximately 2,100 units of GAS (4.2 ZIL, currently less than 0.09 USD).","title":"On the DID-Smart-Contract's side"},{"location":"CRUD-operations/did-deactivate/","text":"Tyron DID-Deactivate operation A Tyron DID-Deactivate operation completely deactivates the Decentralized Identifier by setting the DID-Status to Deactivated and the DID-State mutable fields to None. To be able to execute this operation, the user MUST possess the private did_recovery_key . Once the operation request is processed, the client makes the call to the DidDeactivate transition of the user's DID-SC . This transition is irreversible, so after deactivation, the DID-SC will never be useful again. Resolving the Decentralized Identifier in future occasions MUST throw a DidDeactivated error. On the client's side: Initialize with the Zilliqa network (mainnet or testnet) & the user's DID-SC address to fetch the DID-State from the blockchain. Get the user's private did_recovery_key and verify that is matching the public did_recovery_key stored in the DID-SC. Retrieve the tyron_hash from the user's DID-SC and sign it with the pair did_recovery_keys . Return the Schnorr signature as a hex-encoded string, and with it produce the DidDeactivate transition parameter. The client MUST submit the tyronZIL transaction by calling the DidDeactivate transition of the user's DID-SC. For that, the client MUST provide their private key and choose the gas limit. On the DID-Smart-Contract's side When the DidDeactivate transition gets called with the proper hex-encoded signature of type ByStr64 as its argument, the DID-SC proceeds as follows: First, it executes the Payment procedure to make the DID-SC work only if the payment is correct. Executes the IsClient procedure to verify that the call comes from the user's client. Executes the IsRightStatus procedure to verify that the DID-Status is neither Deactivated nor Initialized . Performs the IsRightSignature procedure to verify that the signature got done with the did_recovery_keys by applying the Schnorr signature algorithm on the tyron_hash . The DID-SC utilizes for this verification the public key that it has stored in the did_recovery_key mutable field. Sets the DID-Status to Deactivated , the did_document to None{ByStr} and both the did_update_key & did_recovery_key to None{ByStr33}. Executes the Timestamp procedure. A tyronZIL DID-Deactivate transaction consumes approximately 500 units of GAS (1 ZIL, currently less than 0.02 USD).","title":"DID-Deactivate"},{"location":"CRUD-operations/did-deactivate/#tyron-did-deactivate-operation","text":"A Tyron DID-Deactivate operation completely deactivates the Decentralized Identifier by setting the DID-Status to Deactivated and the DID-State mutable fields to None. To be able to execute this operation, the user MUST possess the private did_recovery_key . Once the operation request is processed, the client makes the call to the DidDeactivate transition of the user's DID-SC . This transition is irreversible, so after deactivation, the DID-SC will never be useful again. Resolving the Decentralized Identifier in future occasions MUST throw a DidDeactivated error.","title":"Tyron DID-Deactivate operation"},{"location":"CRUD-operations/did-deactivate/#on-the-clients-side","text":"Initialize with the Zilliqa network (mainnet or testnet) & the user's DID-SC address to fetch the DID-State from the blockchain. Get the user's private did_recovery_key and verify that is matching the public did_recovery_key stored in the DID-SC. Retrieve the tyron_hash from the user's DID-SC and sign it with the pair did_recovery_keys . Return the Schnorr signature as a hex-encoded string, and with it produce the DidDeactivate transition parameter. The client MUST submit the tyronZIL transaction by calling the DidDeactivate transition of the user's DID-SC. For that, the client MUST provide their private key and choose the gas limit.","title":"On the client's side:"},{"location":"CRUD-operations/did-deactivate/#on-the-did-smart-contracts-side","text":"When the DidDeactivate transition gets called with the proper hex-encoded signature of type ByStr64 as its argument, the DID-SC proceeds as follows: First, it executes the Payment procedure to make the DID-SC work only if the payment is correct. Executes the IsClient procedure to verify that the call comes from the user's client. Executes the IsRightStatus procedure to verify that the DID-Status is neither Deactivated nor Initialized . Performs the IsRightSignature procedure to verify that the signature got done with the did_recovery_keys by applying the Schnorr signature algorithm on the tyron_hash . The DID-SC utilizes for this verification the public key that it has stored in the did_recovery_key mutable field. Sets the DID-Status to Deactivated , the did_document to None{ByStr} and both the did_update_key & did_recovery_key to None{ByStr33}. Executes the Timestamp procedure. A tyronZIL DID-Deactivate transaction consumes approximately 500 units of GAS (1 ZIL, currently less than 0.02 USD).","title":"On the DID-Smart-Contract's side"},{"location":"CRUD-operations/did-recover/","text":"Tyron DID-Recover operation A Tyron DID-Recover operation fully resets the user's DID-State, so they can keep using the same DID with a brand new public-key-infrastructure (PKI). To be able to execute this operation, the user MUST possess the private did_recovery_key . Once the operation request is processed, the client makes a call to the DidRecover transition of the user's DID-SC . On the client's side: Initialize with the Zilliqa network (mainnet or testnet) & the user's DID-SC address to fetch the DID-State from the blockchain. Get the user's private did_recovery_key and verify that is matching the public did_recovery_key stored in the DID-SC. Get the user's input regarding new cryptographic keys and service endpoints for the recovered DID. Verification methods: With the public key input generate an array of keys of type PublicKeyModel , generated using the operation key pair . Service endpoints: An array of endpoints of type DidServiceEndpointModel . With the verification methods and service endpoints, generate a new document of type DocumentModel and hex-encode it. Sign the new document with the pair did_recovery_keys . Generate new DID-Keys using the KEY_ALGORITH : The update key-pair (necessary for the following Update operation) & the recovery key-pair (needed for any future Recovery or Deactivate operation). Return the new document, Schnorr signature & public DID-Keys as hex-encoded strings. All private keys MUST be in control of the user. Produce the DidRecover transition parameters with the output from step 7. The client MUST submit the tyronZIL transaction by calling the DidRecover transition of the user's DID-SC. For that, the client MUST provide their private key and choose the gas limit. On the DID-Smart-Contract's side When the DidRecover transition gets called with the proper hex-encoded arguments (new document of type ByStr, signature of type ByStr64 & new DID-Keys of type ByStr33), the DID-SC proceeds as follows: First, it executes the Payment procedure to make the DID-SC work only if the payment is correct. Executes the IsClient procedure to verify that the call comes from the user's client. Executes the IsRightStatus procedure to verify that the DID-Status is neither Deactivated nor Initialized . Performs the IsRightSignature procedure to verify that the signature that comes with the signed document got done with the did_recovery_keys by applying the Schnorr signature algorithm. The DID-SC utilizes for this verification the public key that it has stored in the did_recovery_key mutable field. If the procedure is successful, then the transition saves the new document in the did_document field. Applies the IsValidKey procedure to verify that all new DID-Keys are unique (and different from before), and then sets the fields did_update_key & did_recovery_key with the new values. Sets the DID-Status to Recovered . Executes the Timestamp procedure. A tyronZIL DID-Recover transaction consumes approximately 700 units of GAS (1.4 ZIL, currently less than 0.03 USD).","title":"DID-Recover"},{"location":"CRUD-operations/did-recover/#tyron-did-recover-operation","text":"A Tyron DID-Recover operation fully resets the user's DID-State, so they can keep using the same DID with a brand new public-key-infrastructure (PKI). To be able to execute this operation, the user MUST possess the private did_recovery_key . Once the operation request is processed, the client makes a call to the DidRecover transition of the user's DID-SC .","title":"Tyron DID-Recover operation"},{"location":"CRUD-operations/did-recover/#on-the-clients-side","text":"Initialize with the Zilliqa network (mainnet or testnet) & the user's DID-SC address to fetch the DID-State from the blockchain. Get the user's private did_recovery_key and verify that is matching the public did_recovery_key stored in the DID-SC. Get the user's input regarding new cryptographic keys and service endpoints for the recovered DID. Verification methods: With the public key input generate an array of keys of type PublicKeyModel , generated using the operation key pair . Service endpoints: An array of endpoints of type DidServiceEndpointModel . With the verification methods and service endpoints, generate a new document of type DocumentModel and hex-encode it. Sign the new document with the pair did_recovery_keys . Generate new DID-Keys using the KEY_ALGORITH : The update key-pair (necessary for the following Update operation) & the recovery key-pair (needed for any future Recovery or Deactivate operation). Return the new document, Schnorr signature & public DID-Keys as hex-encoded strings. All private keys MUST be in control of the user. Produce the DidRecover transition parameters with the output from step 7. The client MUST submit the tyronZIL transaction by calling the DidRecover transition of the user's DID-SC. For that, the client MUST provide their private key and choose the gas limit.","title":"On the client's side:"},{"location":"CRUD-operations/did-recover/#on-the-did-smart-contracts-side","text":"When the DidRecover transition gets called with the proper hex-encoded arguments (new document of type ByStr, signature of type ByStr64 & new DID-Keys of type ByStr33), the DID-SC proceeds as follows: First, it executes the Payment procedure to make the DID-SC work only if the payment is correct. Executes the IsClient procedure to verify that the call comes from the user's client. Executes the IsRightStatus procedure to verify that the DID-Status is neither Deactivated nor Initialized . Performs the IsRightSignature procedure to verify that the signature that comes with the signed document got done with the did_recovery_keys by applying the Schnorr signature algorithm. The DID-SC utilizes for this verification the public key that it has stored in the did_recovery_key mutable field. If the procedure is successful, then the transition saves the new document in the did_document field. Applies the IsValidKey procedure to verify that all new DID-Keys are unique (and different from before), and then sets the fields did_update_key & did_recovery_key with the new values. Sets the DID-Status to Recovered . Executes the Timestamp procedure. A tyronZIL DID-Recover transaction consumes approximately 700 units of GAS (1.4 ZIL, currently less than 0.03 USD).","title":"On the DID-Smart-Contract's side"},{"location":"CRUD-operations/did-resolve/","text":"Tyron DID-Resolve operation DID-Resolution It corresponds to the READ operation of a Decentralized Identifier. The DID-Resolution function resolves a DID into its DID-Document by performing the process called DID-Resolution. A DID-Resolver is the software component that executes the DID-Resolution process. It takes a DID (and metadata) as input and produces a conforming DID-Document (and metadata) as output, which is called the DID-Resolution-Result. DID-Resolution variables for Tyron DIDs Input variables network : The 'NetworkNamespace' referring to the testnet or mainnet. tyronAddr : The Zilliqa address of the user's DID-Smart-Contract . metadata : The DID-Resolution input metadata is a structure consisting of input options to the resolve function in addition to the DID itself. This input is REQUIRED. The options control how the DID is resolved. TyronZIL-v1.0.0 only supports the 'Accept' option that defines if the result shall be the corresponding DID-Document with or without the document metadata. The former produces an output called DID-Resolution-Result. Output variables resolutionMetadata : Data structure consisting of values relating to the results of the DID-Resolution process. This structure is REQUIRED and MUST NOT be empty. This metadata typically changes between invocations of the resolve function as it represents data about the resolution process itself. Tyron's resolutionMetadata refers to Zilliqa's GetBlockchainInfo method that returns the network statistics for the specified network at the time of the request. document : This MUST be the resolved DID-Document serialized in JSON format. documentMetadata : This structure contains metadata that typically does not change between invocations of the resolve method unless the DID-Document changes. Tyron's documentMetadata includes three properties: the contentType equal to \"application/did+json\" and the DID-Keys update & recovery. Find the Tyron DID-Resolution method here . Resolving a deactivated DID If a Tyron DID-Status is Deactivated in its corresponding DID-Smart-Contract, then the DID-Resolver MUST throw a DidDeactivated error. DID-URL dereferencing DD-URL dereferencing is the process that returns the particular resource specified by the DID-URL. It can use the DID-Resolution process to fetch the DID-Document and then it performs additional processing on the DID-Document to return the dereferenced resource that was requested. The software component is called DID-URL-Dereferencer, and it takes as input a DID-URL, a DID-Document and a set of dereferencing options and returns the specific resource. The dereferencing options control how the resource is dereferenced. DID-URL dereferencing will be supported in future versions of tyronZIL.","title":"DID-Resolve"},{"location":"CRUD-operations/did-resolve/#tyron-did-resolve-operation","text":"","title":"Tyron DID-Resolve operation"},{"location":"CRUD-operations/did-resolve/#did-resolution","text":"It corresponds to the READ operation of a Decentralized Identifier. The DID-Resolution function resolves a DID into its DID-Document by performing the process called DID-Resolution. A DID-Resolver is the software component that executes the DID-Resolution process. It takes a DID (and metadata) as input and produces a conforming DID-Document (and metadata) as output, which is called the DID-Resolution-Result.","title":"DID-Resolution"},{"location":"CRUD-operations/did-resolve/#did-resolution-variables-for-tyron-dids","text":"","title":"DID-Resolution variables for Tyron DIDs"},{"location":"CRUD-operations/did-resolve/#input-variables","text":"network : The 'NetworkNamespace' referring to the testnet or mainnet. tyronAddr : The Zilliqa address of the user's DID-Smart-Contract . metadata : The DID-Resolution input metadata is a structure consisting of input options to the resolve function in addition to the DID itself. This input is REQUIRED. The options control how the DID is resolved. TyronZIL-v1.0.0 only supports the 'Accept' option that defines if the result shall be the corresponding DID-Document with or without the document metadata. The former produces an output called DID-Resolution-Result.","title":"Input variables"},{"location":"CRUD-operations/did-resolve/#output-variables","text":"resolutionMetadata : Data structure consisting of values relating to the results of the DID-Resolution process. This structure is REQUIRED and MUST NOT be empty. This metadata typically changes between invocations of the resolve function as it represents data about the resolution process itself. Tyron's resolutionMetadata refers to Zilliqa's GetBlockchainInfo method that returns the network statistics for the specified network at the time of the request. document : This MUST be the resolved DID-Document serialized in JSON format. documentMetadata : This structure contains metadata that typically does not change between invocations of the resolve method unless the DID-Document changes. Tyron's documentMetadata includes three properties: the contentType equal to \"application/did+json\" and the DID-Keys update & recovery. Find the Tyron DID-Resolution method here .","title":"Output variables"},{"location":"CRUD-operations/did-resolve/#resolving-a-deactivated-did","text":"If a Tyron DID-Status is Deactivated in its corresponding DID-Smart-Contract, then the DID-Resolver MUST throw a DidDeactivated error.","title":"Resolving a deactivated DID"},{"location":"CRUD-operations/did-resolve/#did-url-dereferencing","text":"DD-URL dereferencing is the process that returns the particular resource specified by the DID-URL. It can use the DID-Resolution process to fetch the DID-Document and then it performs additional processing on the DID-Document to return the dereferenced resource that was requested. The software component is called DID-URL-Dereferencer, and it takes as input a DID-URL, a DID-Document and a set of dereferencing options and returns the specific resource. The dereferencing options control how the resource is dereferenced. DID-URL dereferencing will be supported in future versions of tyronZIL.","title":"DID-URL dereferencing"},{"location":"CRUD-operations/did-update/","text":"Tyron DID-Update operation A Tyron DID-Update operation makes modifications to the user's DID-Document that exists in their DID-SC. To be able to execute this operation, the user MUST possess the private did_update_key . Once the operation request is processed, the client makes a call to the DidUpdate transition of the user's DID-SC . On the client's side: Initialize with the Zilliqa network (mainnet or testnet) & the user's DID-SC address to fetch the DID-State from the blockchain. Get the user's private did_update_key and verify that is matching the public did_update_key stored in the DID-SC. Get the user's input regarding the update patch actions and generate a patches array. Process the patches array along with the former document retrieved from the DID-SC, to obtain an updated-document and hex-encode it. Sign the new document with the pair did_update_keys . Generate a new key-pair for the did_update_keys necessary for any future Update operation. Return the new document, Schnorr signature & the new public did_update_key as hex-encoded strings. All private keys MUST be in control of the user. Produce the DidUpdate transition parameters with the output from step 7. The client MUST submit the tyronZIL transaction by calling the DidUpdate transition of the user's DID-SC. For that, the client MUST provide their private key and choose the gas limit. On the DID-Smart-Contract's side When the DidUpdate transition gets called with the proper hex-encoded arguments (new document of type ByStr, signature of type ByStr64 & new public did_update_key of type ByStr33), the DID-SC proceeds as follows: First, it executes the Payment procedure to make the DID-SC work only if the payment is correct. Executes the IsClient procedure to verify that the call comes from the user's client. Executes the IsRightStatus procedure to verify that the DID-Status is neither Deactivated nor Initialized . Performs the IsRightSignature procedure to verify that the signature that comes with the signed document got done with the did_update_keys by applying the Schnorr signature algorithm. The DID-SC utilizes for this verification the public key that it has stored in the did_update_key mutable field. If the procedure is successful, then the transition saves the updated-document in the did_document field. Applies the IsValidKey procedure to verify that the new public did_update_key is different from any other key. If so, then saves the new key in the did_update_key mutable field. Sets the DID-Status to Updated . Executes the Timestamp procedure. A tyronZIL DID-Update transaction consumes approximately 700 units of GAS (1.4 ZIL, currently less than 0.03 USD).","title":"DID-Update"},{"location":"CRUD-operations/did-update/#tyron-did-update-operation","text":"A Tyron DID-Update operation makes modifications to the user's DID-Document that exists in their DID-SC. To be able to execute this operation, the user MUST possess the private did_update_key . Once the operation request is processed, the client makes a call to the DidUpdate transition of the user's DID-SC .","title":"Tyron DID-Update operation"},{"location":"CRUD-operations/did-update/#on-the-clients-side","text":"Initialize with the Zilliqa network (mainnet or testnet) & the user's DID-SC address to fetch the DID-State from the blockchain. Get the user's private did_update_key and verify that is matching the public did_update_key stored in the DID-SC. Get the user's input regarding the update patch actions and generate a patches array. Process the patches array along with the former document retrieved from the DID-SC, to obtain an updated-document and hex-encode it. Sign the new document with the pair did_update_keys . Generate a new key-pair for the did_update_keys necessary for any future Update operation. Return the new document, Schnorr signature & the new public did_update_key as hex-encoded strings. All private keys MUST be in control of the user. Produce the DidUpdate transition parameters with the output from step 7. The client MUST submit the tyronZIL transaction by calling the DidUpdate transition of the user's DID-SC. For that, the client MUST provide their private key and choose the gas limit.","title":"On the client's side:"},{"location":"CRUD-operations/did-update/#on-the-did-smart-contracts-side","text":"When the DidUpdate transition gets called with the proper hex-encoded arguments (new document of type ByStr, signature of type ByStr64 & new public did_update_key of type ByStr33), the DID-SC proceeds as follows: First, it executes the Payment procedure to make the DID-SC work only if the payment is correct. Executes the IsClient procedure to verify that the call comes from the user's client. Executes the IsRightStatus procedure to verify that the DID-Status is neither Deactivated nor Initialized . Performs the IsRightSignature procedure to verify that the signature that comes with the signed document got done with the did_update_keys by applying the Schnorr signature algorithm. The DID-SC utilizes for this verification the public key that it has stored in the did_update_key mutable field. If the procedure is successful, then the transition saves the updated-document in the did_document field. Applies the IsValidKey procedure to verify that the new public did_update_key is different from any other key. If so, then saves the new key in the did_update_key mutable field. Sets the DID-Status to Updated . Executes the Timestamp procedure. A tyronZIL DID-Update transaction consumes approximately 700 units of GAS (1.4 ZIL, currently less than 0.03 USD).","title":"On the DID-Smart-Contract's side"},{"location":"implementation/models/","text":"Models TyronZIL-js implements the following data structures from the Sidetree protocol: Verification method model interface VerificationMethodModel { id: string; type: string; publicKeyBase58: string; } Public key model interface PublicKeyModel { id: string; type: string; publicKeyBase58: string; purpose: PublicKeyPurpose[]; } The type defaults to \"SchnorrSecp256k1VerificationKey2019\". Public key purpose enum PublicKeyPurpose { General = 'general', Auth = 'auth', Agreement = 'agreement', Assertion = 'assertion', Delegation = 'delegation', Invocation = 'invocation' } The current version only supports 'General' and 'Auth' purposes. DID Service endpoint model interface DidServiceEndpointModel { id: string; type: string; endpoint: string; } Document model interface DocumentModel { public_keys: PublicKeyModel[]; service_endpoints?: DidServiceEndpointModel[]; } Patch model interface PatchModel { action: PatchAction; publicKeys?: PublicKeyModel[]; serviceEndpoints?: ServiceEndpointModel[]; ids?: string[]; document: DocumentModel; } Patch action enum PatchAction { AddKeys = 'add-public-keys', RemoveKeys = 'remove-public-keys', AddServices = 'add-service-endpoints', RemoveServices = 'remove-service-endpoints', CustomAction = '-custom-action', }","title":"Models"},{"location":"implementation/models/#models","text":"TyronZIL-js implements the following data structures from the Sidetree protocol:","title":"Models"},{"location":"implementation/models/#verification-method-model","text":"interface VerificationMethodModel { id: string; type: string; publicKeyBase58: string; }","title":"Verification method model"},{"location":"implementation/models/#public-key-model","text":"interface PublicKeyModel { id: string; type: string; publicKeyBase58: string; purpose: PublicKeyPurpose[]; } The type defaults to \"SchnorrSecp256k1VerificationKey2019\".","title":"Public key model"},{"location":"implementation/models/#public-key-purpose","text":"enum PublicKeyPurpose { General = 'general', Auth = 'auth', Agreement = 'agreement', Assertion = 'assertion', Delegation = 'delegation', Invocation = 'invocation' } The current version only supports 'General' and 'Auth' purposes.","title":"Public key purpose"},{"location":"implementation/models/#did-service-endpoint-model","text":"interface DidServiceEndpointModel { id: string; type: string; endpoint: string; }","title":"DID Service endpoint model"},{"location":"implementation/models/#document-model","text":"interface DocumentModel { public_keys: PublicKeyModel[]; service_endpoints?: DidServiceEndpointModel[]; }","title":"Document model"},{"location":"implementation/models/#patch-model","text":"interface PatchModel { action: PatchAction; publicKeys?: PublicKeyModel[]; serviceEndpoints?: ServiceEndpointModel[]; ids?: string[]; document: DocumentModel; }","title":"Patch model"},{"location":"implementation/models/#patch-action","text":"enum PatchAction { AddKeys = 'add-public-keys', RemoveKeys = 'remove-public-keys', AddServices = 'add-service-endpoints', RemoveServices = 'remove-service-endpoints', CustomAction = '-custom-action', }","title":"Patch action"},{"location":"scheme/did-scheme/","text":"W3C DID-Scheme A DID-Scheme is the formal syntax of a Decentralized Identifier. Tyron DID-Scheme It is a URI scheme conformant with RFC3986, Uniform Resource Identifier (URI): Generic Syntax . The following is the ABNF definition using the syntax in RFC5234, \"Augmented BNF for Syntax Specifications: ABNF\" : Generic rule names not defined there, are defined in RFC3986 . did = \"did:\" method-name \":\" method-specific-id method-name = 1*method-char method-char = %x61-7A / DIGIT method-specific-id = *( *idchar \":\" ) 1*idchar idchar = HEXDIG HEXDIG = DIGIT / \"a\" / \"b\" / \"c\" / \"d\" / \"e\" / \"f\" DIGIT = %x30-39 Both the scheme identifier (did) and the method name MUST be an ASCII lowercase string . The Tyron DID-Method defines its method-name as \"tyron\" and the method-specific-id syntax as hierarchically partitioned: method-name = \"tyron\" method-specific-id = blockchain-namespace \":\" network-namespace \":\" did-suffix blockchain-namespace = \"zil:\" network-namespace = \"main:\" / \"test:\" did-suffix = 1*idchar Example of a Tyron DID : did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9 DID-Suffix The DID-Suffix MUST be globally unique. A Tyron DID-Suffix is the Zilliqa hex-encoded address of the corresponding DID-Smart-Contract (DSC) . Every Zilliqa address is unique. As explained in Zilliqa's white-paper , the \"address for a contract account is computed from the address of its creator and how many transactions the creator account has sent, aka account nonce\": contract_address = LSB160(SHA3-256(address||nonce)) where: LSB160() returns the rightmost 160 bits of the input, SHA3-256() is the SHA-3 hash function that produces 256-bit digests, address is the address of the creator account, and nonce is the creator\u2019s nonce value. Implementation The Tyron DID-Scheme gets implemented by the DidScheme procedure of the DID-SC that generates the Decentralized Identifier and its Tyron Hash. On testnet: procedure DidScheme() this_did = let did_prefix = \"did:tyron:zil:test:\" in let did_suffix = builtin to_string _this_address in builtin concat did_prefix did_suffix; decentralized_identifier := this_did; this_th = let hash = builtin sha256hash this_did in builtin to_bystr hash; th = Some{ByStr} this_th; tyron_hash := th end Normalization The DID-Scheme name (did) MUST be lowercase. The DID-Method name (tyron) MUST be lowercase. Tyron's specific-id MUST follow the rules stated above. Persistence A Tyron DID is bound exclusively and permanently to a single subject , known as the contract_owner , even after deactivation.","title":"DID-Scheme"},{"location":"scheme/did-scheme/#w3c-did-scheme","text":"A DID-Scheme is the formal syntax of a Decentralized Identifier.","title":"W3C DID-Scheme"},{"location":"scheme/did-scheme/#tyron-did-scheme","text":"It is a URI scheme conformant with RFC3986, Uniform Resource Identifier (URI): Generic Syntax . The following is the ABNF definition using the syntax in RFC5234, \"Augmented BNF for Syntax Specifications: ABNF\" : Generic rule names not defined there, are defined in RFC3986 . did = \"did:\" method-name \":\" method-specific-id method-name = 1*method-char method-char = %x61-7A / DIGIT method-specific-id = *( *idchar \":\" ) 1*idchar idchar = HEXDIG HEXDIG = DIGIT / \"a\" / \"b\" / \"c\" / \"d\" / \"e\" / \"f\" DIGIT = %x30-39 Both the scheme identifier (did) and the method name MUST be an ASCII lowercase string . The Tyron DID-Method defines its method-name as \"tyron\" and the method-specific-id syntax as hierarchically partitioned: method-name = \"tyron\" method-specific-id = blockchain-namespace \":\" network-namespace \":\" did-suffix blockchain-namespace = \"zil:\" network-namespace = \"main:\" / \"test:\" did-suffix = 1*idchar Example of a Tyron DID : did:tyron:zil:test:0x5a156a1d18a9a76a0a86b62fcdcb2e547173f3c9","title":"Tyron DID-Scheme"},{"location":"scheme/did-scheme/#did-suffix","text":"The DID-Suffix MUST be globally unique. A Tyron DID-Suffix is the Zilliqa hex-encoded address of the corresponding DID-Smart-Contract (DSC) . Every Zilliqa address is unique. As explained in Zilliqa's white-paper , the \"address for a contract account is computed from the address of its creator and how many transactions the creator account has sent, aka account nonce\": contract_address = LSB160(SHA3-256(address||nonce)) where: LSB160() returns the rightmost 160 bits of the input, SHA3-256() is the SHA-3 hash function that produces 256-bit digests, address is the address of the creator account, and nonce is the creator\u2019s nonce value.","title":"DID-Suffix"},{"location":"scheme/did-scheme/#implementation","text":"The Tyron DID-Scheme gets implemented by the DidScheme procedure of the DID-SC that generates the Decentralized Identifier and its Tyron Hash. On testnet: procedure DidScheme() this_did = let did_prefix = \"did:tyron:zil:test:\" in let did_suffix = builtin to_string _this_address in builtin concat did_prefix did_suffix; decentralized_identifier := this_did; this_th = let hash = builtin sha256hash this_did in builtin to_bystr hash; th = Some{ByStr} this_th; tyron_hash := th end","title":"Implementation"},{"location":"scheme/did-scheme/#normalization","text":"The DID-Scheme name (did) MUST be lowercase. The DID-Method name (tyron) MUST be lowercase. Tyron's specific-id MUST follow the rules stated above.","title":"Normalization"},{"location":"scheme/did-scheme/#persistence","text":"A Tyron DID is bound exclusively and permanently to a single subject , known as the contract_owner , even after deactivation.","title":"Persistence"},{"location":"scheme/did-url-syntax/","text":"tyronZIL DID-URL syntax The following is the ABNF definition using the syntax in RFC5324 : The path-abempty and fragment components are identical to the ABNF rules defined in RFC3986 The did-query component is derived from the query ABNF rule did-url = did path-abempty [ \"?\" did-query ] [ \"#\" fragment ] did-query = param *( \"&\" param ) param = param-name \"=\" param-value param-name = 1*pchar param-value = *pchar Path To be used to address resources available through a service endpoint. It MUST conform to the path-abempty ABFN rule in RFC3986 . Query The W3C did-query component derives from the query ABFN rule. It MUST be used with DID parameters as follows. DID-URL parameters These parameters are part of the query component of the DID-URL to specify what resource is requested. W3C DID parameter-names: hl : A resource hash of the DID-Document to add integrity protection. service : Identifies a service from the DID-Document by service ID. did:tyron:zil:test:EiAT_GxAt7gBozHlw2B1i7mfQaaORL3NOfFQr9FUt7jp6g?service=agentId1 version-id : Identifies a specific version of the DID-Document to be resolved. version-time : Identifies a specific version timestamp of the DID-Document to be resolved (the doc that was valid at that particular time). did:tyron:zil:test:EiAT_GxAt7gBozHlw2B1i7mfQaaORL3NOfFQr9FUt7jp6g?version-time=2020-09-07T17:00:00Z Additional parameters MUST be prefixed by the method name 'tyron', e.g.: 'tyron-dns'. TyronZIL method-specific parameter names MAY be used by other DID methods. Method-specific parameter names MAY be combined with generic parameter names in any order. Method-specific parameter namespaces MAY include colons to be partitioned hierarchically. At the current version, the tyronZIL-Method does not support DID-URL parameters, EXCEPT the following: Sidetree Long-Form DID By using a DID with the DID-URL parameter sidetree-initial-state , a tyronZIL user can utilize their Long-Form DID URI . It is composed by the Create Operation Suffix Data Object and the Create Operation Delta Object , separated by a period ' . ': did:tyron:zil:test:EiApcQfeTVd3aCGb07Cj3MfZBaBv6KA7kdCAokuM6qxNWQ?sidetree-initial-state=eyJkZWx0YV9oYXNoIjoiRWlCWS1yRm1NVDNESlV0ZktaYnNqSFJyVXRjbXVCUHZ2M2htemhZb3pia3g0dyIsInJlY292ZXJ5X2NvbW1pdG1lbnQiOiJFaUF0LVJpV29uU1Nsc1U5SWVsbUY3MHZsZ1oybVpyU29QT0Y2RWJybmMya1dBIn0.eyJwYXRjaGVzIjpbeyJhY3Rpb24iOiJyZXBsYWNlIiwiZG9jdW1lbnQiOnsicHVibGljX2tleXMiOlt7ImlkIjoicHJpbWFyeVNpZ25pbmdLZXkiLCJ0eXBlIjoiRWNkc2FTZWNwMjU2azFWZXJpZmljYXRpb25LZXkyMDE5IiwiandrIjp7Imt0eSI6IkVDIiwiY3J2Ijoic2VjcDI1NmsxIiwieCI6IjFsQlBRaGtoNS02U3plNUlkbWZFeUZWVXdXUWFsYTVjcE5QWkJ6bU4zd1kiLCJ5IjoidEdYTkZIWDhjMkVsdkdyS2xPeHdxOXNHUDFVVFh2aW1SZmJUQy1yd3F5RSIsImtpZCI6IkplOEVOSk4ydm1oNVAwS0FXeEVwbTJQSllaMjBPZzNNSlFGSm1kdVE2T0EifSwicHVycG9zZSI6WyJnZW5lcmFsIiwiYXV0aCJdfV0sInNlcnZpY2VfZW5kcG9pbnRzIjpbeyJpZCI6InR5cm9uWklMLXdlYnNpdGUiLCJ0eXBlIjoibWV0aG9kLXNwZWNpZmljYXRpb24iLCJlbmRwb2ludCI6Imh0dHBzOi8vdHlyb25aSUwuY29tIn0seyJpZCI6IlpJTC1hZGRyZXNzIiwidHlwZSI6ImNyeXB0b2N1cnJlbmN5LWFkZHJlc3MiLCJlbmRwb2ludCI6InppbDFlZ3ZqNmtldGZ5ZHk0OHVxenU4cXBoaGo1dzR4cmtyYXR2ODVodCJ9XX19XSwidXBkYXRlQ29tbWl0bWVudCI6IkVpQjFnZkZtUVY4b0w3ZFJ5S3hrLU9xeEJ5amJwNTZkd1otNm9sRkpfRWRlWkEifQ Find the tyronZIL DID-URL implementation here Fragment A W3C DID fragment is used as a method-independent reference into the DID-Document to identify a component of the document by ID, e.g. a specific public key or service endpoint. It MUST conform to the generic URI fragment syntax in RFC3986 .","title":"DID-URL syntax"},{"location":"scheme/did-url-syntax/#tyronzil-did-url-syntax","text":"The following is the ABNF definition using the syntax in RFC5324 : The path-abempty and fragment components are identical to the ABNF rules defined in RFC3986 The did-query component is derived from the query ABNF rule did-url = did path-abempty [ \"?\" did-query ] [ \"#\" fragment ] did-query = param *( \"&\" param ) param = param-name \"=\" param-value param-name = 1*pchar param-value = *pchar","title":"tyronZIL DID-URL syntax"},{"location":"scheme/did-url-syntax/#path","text":"To be used to address resources available through a service endpoint. It MUST conform to the path-abempty ABFN rule in RFC3986 .","title":"Path"},{"location":"scheme/did-url-syntax/#query","text":"The W3C did-query component derives from the query ABFN rule. It MUST be used with DID parameters as follows.","title":"Query"},{"location":"scheme/did-url-syntax/#did-url-parameters","text":"These parameters are part of the query component of the DID-URL to specify what resource is requested. W3C DID parameter-names: hl : A resource hash of the DID-Document to add integrity protection. service : Identifies a service from the DID-Document by service ID. did:tyron:zil:test:EiAT_GxAt7gBozHlw2B1i7mfQaaORL3NOfFQr9FUt7jp6g?service=agentId1 version-id : Identifies a specific version of the DID-Document to be resolved. version-time : Identifies a specific version timestamp of the DID-Document to be resolved (the doc that was valid at that particular time). did:tyron:zil:test:EiAT_GxAt7gBozHlw2B1i7mfQaaORL3NOfFQr9FUt7jp6g?version-time=2020-09-07T17:00:00Z Additional parameters MUST be prefixed by the method name 'tyron', e.g.: 'tyron-dns'. TyronZIL method-specific parameter names MAY be used by other DID methods. Method-specific parameter names MAY be combined with generic parameter names in any order. Method-specific parameter namespaces MAY include colons to be partitioned hierarchically. At the current version, the tyronZIL-Method does not support DID-URL parameters, EXCEPT the following:","title":"DID-URL parameters"},{"location":"scheme/did-url-syntax/#sidetree-long-form-did","text":"By using a DID with the DID-URL parameter sidetree-initial-state , a tyronZIL user can utilize their Long-Form DID URI . It is composed by the Create Operation Suffix Data Object and the Create Operation Delta Object , separated by a period ' . ': did:tyron:zil:test:EiApcQfeTVd3aCGb07Cj3MfZBaBv6KA7kdCAokuM6qxNWQ?sidetree-initial-state=eyJkZWx0YV9oYXNoIjoiRWlCWS1yRm1NVDNESlV0ZktaYnNqSFJyVXRjbXVCUHZ2M2htemhZb3pia3g0dyIsInJlY292ZXJ5X2NvbW1pdG1lbnQiOiJFaUF0LVJpV29uU1Nsc1U5SWVsbUY3MHZsZ1oybVpyU29QT0Y2RWJybmMya1dBIn0.eyJwYXRjaGVzIjpbeyJhY3Rpb24iOiJyZXBsYWNlIiwiZG9jdW1lbnQiOnsicHVibGljX2tleXMiOlt7ImlkIjoicHJpbWFyeVNpZ25pbmdLZXkiLCJ0eXBlIjoiRWNkc2FTZWNwMjU2azFWZXJpZmljYXRpb25LZXkyMDE5IiwiandrIjp7Imt0eSI6IkVDIiwiY3J2Ijoic2VjcDI1NmsxIiwieCI6IjFsQlBRaGtoNS02U3plNUlkbWZFeUZWVXdXUWFsYTVjcE5QWkJ6bU4zd1kiLCJ5IjoidEdYTkZIWDhjMkVsdkdyS2xPeHdxOXNHUDFVVFh2aW1SZmJUQy1yd3F5RSIsImtpZCI6IkplOEVOSk4ydm1oNVAwS0FXeEVwbTJQSllaMjBPZzNNSlFGSm1kdVE2T0EifSwicHVycG9zZSI6WyJnZW5lcmFsIiwiYXV0aCJdfV0sInNlcnZpY2VfZW5kcG9pbnRzIjpbeyJpZCI6InR5cm9uWklMLXdlYnNpdGUiLCJ0eXBlIjoibWV0aG9kLXNwZWNpZmljYXRpb24iLCJlbmRwb2ludCI6Imh0dHBzOi8vdHlyb25aSUwuY29tIn0seyJpZCI6IlpJTC1hZGRyZXNzIiwidHlwZSI6ImNyeXB0b2N1cnJlbmN5LWFkZHJlc3MiLCJlbmRwb2ludCI6InppbDFlZ3ZqNmtldGZ5ZHk0OHVxenU4cXBoaGo1dzR4cmtyYXR2ODVodCJ9XX19XSwidXBkYXRlQ29tbWl0bWVudCI6IkVpQjFnZkZtUVY4b0w3ZFJ5S3hrLU9xeEJ5amJwNTZkd1otNm9sRkpfRWRlWkEifQ Find the tyronZIL DID-URL implementation here","title":"Sidetree Long-Form DID"},{"location":"scheme/did-url-syntax/#fragment","text":"A W3C DID fragment is used as a method-independent reference into the DID-Document to identify a component of the document by ID, e.g. a specific public key or service endpoint. It MUST conform to the generic URI fragment syntax in RFC3986 .","title":"Fragment"},{"location":"smart-contracts/DID-SC/","text":"Decentralized Identifier Smart-Contract The user's DID-Smart-Contract (DID-SC) gets instantiated from a template that is stored online in the init.tyron SM. For that, the user MUST give their Zilliqa address as the contract_owner . Once the DID-SC gets deployed, its code is immutable (the code can never get modified under the same contract's address). However, the DID-SC has mutable fields declared in its code, and there are predetermined ways, called transitions, that can modify those fields in specific manners. Tyron aims to evolve to a client-free architecture where the user can interact more directly with their DID-SC , with fewer intermediaries. Therefore, the Tyron DID Protocol's goal is to make the DID-Smart-Contract smarter while keeping it as simple as possible. Find the DID-SC's code on GitHub. Immutable fields The DID-SC gets deployed with the following immutable fields: contract_owner : the address of the user who is the owner of the contract. init_tyron : the address of the init.tyron smart contract. All addresses MUST be hex-encoded. Immutable fields are set at deployment and can not get modified. Mutable fields Mutable fields can get modified but only if there is a specific code in the contract that allows it: decentralized_identifier : The user's DID generated according to the DID-Scheme . tyron_hash : The SHA256 hash of the DID. It is necessary to sign this hash to perform certain operations, such as deactivation of the DID. did_status : The status can be Undefined , Initialized , Created , Updated , Recovered or Deactivated . did_document : Formatted as Sidetree Document Model and hexadecimal encoded. did_update_key & did_recovery_key : The public DID-Keys to enable future operations are stored in the DID-SC to execute the IsRightSignature procedure. client_address : The address of the user's client. created : The block number when the DID-Create operation occurred. ledger_time : The block number when the last DID operation occurred. transaction_number : A monotonically increasing number representing the amount of DID operations that have taken place. The following fields get determined by the init.tyron contract, by calling the ContractInit transition of the DID-SC: operation_cost : The cost of each DID operation. foundation_address : The address of the Tyron Pungtas Foundation client_commission : The client's commission as a % of the operation_cost . Mutable fields MUST get initialized with a value at deployment. Procedures Procedures can change the state of the contract (mutable fields), but they are not part of the public API which means that they can only get invoked from within the contract itself. DidScheme : It generates the user's decentralized_identifier & tyron_hash . This procedure is the only way to generate the Decentralized Identifier, and it can only get executed by the DidCreate transition. ThrowError : The procedure to throw an error. IsTyron : Validates that the call comes from the init.tyron contract. IsOwner : Validates that the call comes from the user. IsClient : Validates that the call comes from the client. IsInitialized : Verifies that the status is Initialized - needed for the DID-Create operation IsRightStatus : Verifies that the did_status is neither Deactivated nor Initialized , to execute a DID-Update, Recover or Deactivate operation. IsRightSignature : Verifies that the Schnorr signature that comes with the signed data corresponds with the proper public DID-Key. IsValidKey : Verifies that the new DID-Key is unique and not utilized more than once. Payment : Sends the payment to the client and foundation. Timestamp : Generates a timestamp that sets the ledger_time & transaction_number . Transitions Transitions are the public API of the contract and get invoked by sending messages to the contract. ContractInit : Sets the address of the user's client - permissionless (anyone can be a client). This transition sends a message to the init.tyron contract that, in return, calls the InitParameters transition. It also sets the did_status to Initialized. InitParameters : The init.tyron contract calls this transition to set the operation_cost , foundation_address & client_commission . DidCreate : Executes a DID-Create operation. DidUpdate : Executes a DID-Update operation. DidRecover : Executes a DID-Recover operation. DidDeactivate : Executes a DID-Deactivate operation. UpdateClient : It allows the user to change their client - only the contract_owner can execute this transition.","title":"DID-Smart-Contract"},{"location":"smart-contracts/DID-SC/#decentralized-identifier-smart-contract","text":"The user's DID-Smart-Contract (DID-SC) gets instantiated from a template that is stored online in the init.tyron SM. For that, the user MUST give their Zilliqa address as the contract_owner . Once the DID-SC gets deployed, its code is immutable (the code can never get modified under the same contract's address). However, the DID-SC has mutable fields declared in its code, and there are predetermined ways, called transitions, that can modify those fields in specific manners. Tyron aims to evolve to a client-free architecture where the user can interact more directly with their DID-SC , with fewer intermediaries. Therefore, the Tyron DID Protocol's goal is to make the DID-Smart-Contract smarter while keeping it as simple as possible. Find the DID-SC's code on GitHub.","title":"Decentralized Identifier Smart-Contract"},{"location":"smart-contracts/DID-SC/#immutable-fields","text":"The DID-SC gets deployed with the following immutable fields: contract_owner : the address of the user who is the owner of the contract. init_tyron : the address of the init.tyron smart contract. All addresses MUST be hex-encoded. Immutable fields are set at deployment and can not get modified.","title":"Immutable fields"},{"location":"smart-contracts/DID-SC/#mutable-fields","text":"Mutable fields can get modified but only if there is a specific code in the contract that allows it: decentralized_identifier : The user's DID generated according to the DID-Scheme . tyron_hash : The SHA256 hash of the DID. It is necessary to sign this hash to perform certain operations, such as deactivation of the DID. did_status : The status can be Undefined , Initialized , Created , Updated , Recovered or Deactivated . did_document : Formatted as Sidetree Document Model and hexadecimal encoded. did_update_key & did_recovery_key : The public DID-Keys to enable future operations are stored in the DID-SC to execute the IsRightSignature procedure. client_address : The address of the user's client. created : The block number when the DID-Create operation occurred. ledger_time : The block number when the last DID operation occurred. transaction_number : A monotonically increasing number representing the amount of DID operations that have taken place. The following fields get determined by the init.tyron contract, by calling the ContractInit transition of the DID-SC: operation_cost : The cost of each DID operation. foundation_address : The address of the Tyron Pungtas Foundation client_commission : The client's commission as a % of the operation_cost . Mutable fields MUST get initialized with a value at deployment.","title":"Mutable fields"},{"location":"smart-contracts/DID-SC/#procedures","text":"Procedures can change the state of the contract (mutable fields), but they are not part of the public API which means that they can only get invoked from within the contract itself. DidScheme : It generates the user's decentralized_identifier & tyron_hash . This procedure is the only way to generate the Decentralized Identifier, and it can only get executed by the DidCreate transition. ThrowError : The procedure to throw an error. IsTyron : Validates that the call comes from the init.tyron contract. IsOwner : Validates that the call comes from the user. IsClient : Validates that the call comes from the client. IsInitialized : Verifies that the status is Initialized - needed for the DID-Create operation IsRightStatus : Verifies that the did_status is neither Deactivated nor Initialized , to execute a DID-Update, Recover or Deactivate operation. IsRightSignature : Verifies that the Schnorr signature that comes with the signed data corresponds with the proper public DID-Key. IsValidKey : Verifies that the new DID-Key is unique and not utilized more than once. Payment : Sends the payment to the client and foundation. Timestamp : Generates a timestamp that sets the ledger_time & transaction_number .","title":"Procedures"},{"location":"smart-contracts/DID-SC/#transitions","text":"Transitions are the public API of the contract and get invoked by sending messages to the contract. ContractInit : Sets the address of the user's client - permissionless (anyone can be a client). This transition sends a message to the init.tyron contract that, in return, calls the InitParameters transition. It also sets the did_status to Initialized. InitParameters : The init.tyron contract calls this transition to set the operation_cost , foundation_address & client_commission . DidCreate : Executes a DID-Create operation. DidUpdate : Executes a DID-Update operation. DidRecover : Executes a DID-Recover operation. DidDeactivate : Executes a DID-Deactivate operation. UpdateClient : It allows the user to change their client - only the contract_owner can execute this transition.","title":"Transitions"}]}